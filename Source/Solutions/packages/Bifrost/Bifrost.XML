<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bifrost</name>
    </assembly>
    <members>
        <member name="T:Bifrost.Execution.AssemblyLocator">
            <summary>
            Represents a <see cref="T:Bifrost.Execution.IAssemblyLocator"/>
            </summary>
        </member>
        <member name="T:Bifrost.Execution.IAssemblyLocator">
            <summary>
            Defines a locator for locating assemblies for current application
            </summary>
        </member>
        <member name="M:Bifrost.Execution.IAssemblyLocator.GetAll">
            <summary>
            Gets all assemblies for current application
            </summary>
            <returns>Array of assemblies</returns>
        </member>
        <member name="M:Bifrost.Execution.IAssemblyLocator.GetWithFullName(System.String)">
            <summary>
            Gets an assembly for the current application by its fully qualified name 
            </summary>
            <param name="fullName">Fully qualified name of the assembly</param>
            <returns>Instance of the assembly, null if it was not found</returns>
        </member>
        <member name="M:Bifrost.Execution.IAssemblyLocator.GetWithName(System.String)">
            <summary>
            Gets an assembly based upon a friendly name of the assembly
            </summary>
            <param name="name">Name to get with</param>
            <returns>Instance of the assembly, null if it was not found</returns>
        </member>
        <member name="M:Bifrost.Execution.AssemblyLocator.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Execution.AssemblyLocator"/>
            </summary>
        </member>
        <member name="T:Bifrost.Events.UnregisteredEventException">
            <summary>
            Represents an exceptional situation where an <see cref="T:Bifrost.Events.IEvent">Event</see> in an <see cref="T:Bifrost.Events.EventMigrationHierarchy">EventMigrationHierarchy</see>
            has not been registered as an <see cref="T:Bifrost.Events.IEvent">Event</see>.
            </summary>
        </member>
        <member name="M:Bifrost.Events.UnregisteredEventException.#ctor">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.UnregisteredEventException"/>
            </summary>
        </member>
        <member name="M:Bifrost.Events.UnregisteredEventException.#ctor(System.String)">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.UnregisteredEventException"/>
            </summary>
            <param name="message">Error Message</param>
        </member>
        <member name="M:Bifrost.Events.UnregisteredEventException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.UnregisteredEventException"/>
            </summary>
            <param name="message">Error Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Bifrost.Events.UnregisteredEventException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.UnregisteredEventException"/> for serialization
            </summary>
            <param name="serializationInfo">Serialization Info</param>
            <param name="streamingContext">Streaming Context</param>
        </member>
        <member name="T:Bifrost.Events.IEventMigrationHierarchyManager">
            <summary>
            Defines a manager that is able to determine what the current migration level for an <see cref="T:Bifrost.Events.IEvent">Event</see>
            and what the <see cref="T:System.Type">concrete type</see> of any specified migration level.
            </summary>
        </member>
        <member name="M:Bifrost.Events.IEventMigrationHierarchyManager.GetCurrentMigrationLevelForLogicalEvent(System.Type)">
            <summary>
            Gets the number of generations (migrations) that the logical event has gone through.
            </summary>
            <param name="logicalEvent">The logical event (initial generation)</param>
            <returns>migration level</returns>
        </member>
        <member name="M:Bifrost.Events.IEventMigrationHierarchyManager.GetConcreteTypeForLogicalEventMigrationLevel(System.Type,System.Int32)">
            <summary>
            Gets the concrete type that the logical event took at the specified migration level
            </summary>
            <param name="logicalEvent">The logical event</param>
            <param name="level">The level we wish the concrete type for</param>
            <returns>The concrete type</returns>
        </member>
        <member name="M:Bifrost.Events.IEventMigrationHierarchyManager.GetLogicalTypeForEvent(System.Type)">
            <summary>
            Gets the logical event type of the migration hierarchy of which the passed in event is part
            </summary>
            <param name="event">Event for which you want to know the logical event </param>
            <returns>Type of the logical event</returns>
        </member>
        <member name="M:Bifrost.Events.IEventMigrationHierarchyManager.GetLogicalTypeFromName(System.String)">
            <summary>
            Gets the logical event type of the migration hierarchy from the name of the logical event
            </summary>
            <param name="logicalEventName">Name of the logical event</param>
            <returns>Type of the logical event</returns>
        </member>
        <member name="T:Bifrost.Validation.CommandValidatorProvider">
            <summary>
            Represents an instance of an <see cref="T:Bifrost.Validation.ICommandValidatorProvider">ICommandValidatorProvider.</see>
            </summary>
        </member>
        <member name="T:Bifrost.Validation.ICommandValidatorProvider">
            <summary>
            Defines a provider that returns command-specific input and business rule validators
            </summary>
        </member>
        <member name="M:Bifrost.Validation.ICommandValidatorProvider.GetInputValidatorFor(Bifrost.Commands.ICommand)">
            <summary>
            Retrieves an input validator specific to the command
            </summary>
            <param name="command">Command to be validates</param>
            <returns>Returns specific validator or a NullValidator if no validator is available</returns>
        </member>
        <member name="M:Bifrost.Validation.ICommandValidatorProvider.GetBusinessValidatorFor(Bifrost.Commands.ICommand)">
            <summary>
            Retrieves an business-rule validator specific to the command
            </summary>
            <param name="command">Command to be validates</param>
            <returns>Returns specific validator or a NullValidator if no validator is available</returns>
        </member>
        <member name="M:Bifrost.Validation.ICommandValidatorProvider.GetInputValidatorFor(System.Type)">
            <summary>
            Retrieves an input validator specific to the command type
            </summary>
            <param name="type">Type of the Command to be validates</param>
            <returns>Returns specific validator or a NullValidator if no validator is available</returns>
        </member>
        <member name="M:Bifrost.Validation.ICommandValidatorProvider.GetBusinessValidatorFor(System.Type)">
            <summary>
            Retrieves an business-rule validator specific to the command type
            </summary>
            <param name="type">Type of the Command to be validates</param>
            <returns>Returns specific validator or a NullValidator if no validator is available</returns>
        </member>
        <member name="M:Bifrost.Validation.CommandValidatorProvider.#ctor(Bifrost.Execution.ITypeDiscoverer,Bifrost.Execution.IContainer,Bifrost.Configuration.IConfigure)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Validation.CommandValidatorProvider"/> CommandValidatorProvider
            </summary>
            <param name="typeDiscoverer">
            An instance of ITypeDiscoverer to help identify and register <see cref="T:Bifrost.Validation.ICommandInputValidator"/> implementations
            and  <see cref="T:Bifrost.Validation.ICommandBusinessValidator"/> implementations
            </param>
            <param name="container">An instance of <see cref="T:Bifrost.Execution.IContainer"/> to manage instances of any <see cref="T:Bifrost.Validation.ICommandInputValidator"/></param>
            <param name="configuration">An instance of <see cref="T:Bifrost.Configuration.IConfigure"/> that holds the current configuration</param>
        </member>
        <member name="P:Bifrost.Validation.CommandValidatorProvider.RegisteredInputValidators">
            <summary>
            Gets a list of registered input validator types
            </summary>
        </member>
        <member name="P:Bifrost.Validation.CommandValidatorProvider.RegisteredBusinessValidators">
            <summary>
             Gets a list of registered business validator types
            </summary>
        </member>
        <member name="T:Bifrost.Sagas.Chapter">
            <summary>
            Represents a <see cref="T:Bifrost.Sagas.IChapter"/>
            </summary>
        </member>
        <member name="T:Bifrost.Sagas.IChapter">
            <summary>
            Defines a chapter in a <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.IChapter.OnCreated">
            <summary>
            Lifecycle method for a <see cref="T:Bifrost.Sagas.IChapter"/>, gets called when the <see cref="T:Bifrost.Sagas.IChapter"/> is created
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.IChapter.OnSetCurrent">
            <summary>
            Lifecycle method for a <see cref="T:Bifrost.Sagas.IChapter"/>, gets called when the <see cref="T:Bifrost.Sagas.IChapter"/> is set as current
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.IChapter.OnTransitionedTo">
            <summary>
            Lifecycle method for a <see cref="T:Bifrost.Sagas.IChapter"/>, gets called when the <see cref="T:Bifrost.Sagas.IChapter"/> is transitioned to
            </summary>
        </member>
        <member name="T:Bifrost.Execution.BindingConventionManager">
            <summary>
            Represents a <see cref="T:Bifrost.Execution.IBindingConventionManager"/>
            </summary>
        </member>
        <member name="T:Bifrost.Execution.IBindingConventionManager">
            <summary>
            Defines a manager for binding conventions
            </summary>
        </member>
        <member name="M:Bifrost.Execution.IBindingConventionManager.Add(System.Type)">
            <summary>
            Add a convention by type
            </summary>
            <param name="type">Type of convention to add</param>
            <remarks>
            The type must implement the <see cref="T:Bifrost.Execution.IBindingConvention"/>
            </remarks>
        </member>
        <member name="M:Bifrost.Execution.IBindingConventionManager.Add``1">
            <summary>
            Add a convention by type generically
            </summary>
            <typeparam name="T">Type of convention to add</typeparam>
        </member>
        <member name="M:Bifrost.Execution.IBindingConventionManager.Initialize">
            <summary>
            Initialize system
            </summary>
        </member>
        <member name="M:Bifrost.Execution.IBindingConventionManager.DiscoverAndInitialize">
            <summary>
            Discover bindings and initialize
            </summary>
        </member>
        <member name="M:Bifrost.Execution.BindingConventionManager.#ctor(Bifrost.Execution.IContainer,Bifrost.Execution.ITypeDiscoverer)">
            <summary>
            Initializes a new instance <see cref="T:Bifrost.Execution.BindingConventionManager"/>
            </summary>
            <param name="container">The <see cref="T:Bifrost.Execution.IContainer"/> that bindings are resolved to</param>
            <param name="typeDiscoverer"><see cref="T:Bifrost.Execution.ITypeDiscoverer"/> to discover binding conventions with</param>
        </member>
        <member name="T:Bifrost.Execution.IApplication">
            <summary>
            Represents an application that configures Bifrost
            </summary>
        </member>
        <member name="M:Bifrost.Execution.IApplication.OnConfigure(Bifrost.Configuration.Configure)">
            <summary>
            Gets the called to configure the applications
            </summary>
        </member>
        <member name="M:Bifrost.Execution.IApplication.OnStarted">
            <summary>
            Gets called when Application is started
            </summary>
        </member>
        <member name="M:Bifrost.Execution.IApplication.OnStopped">
            <summary>
            Gets called when Application is stopped
            </summary>
        </member>
        <member name="P:Bifrost.Execution.IApplication.Container">
            <summary>
            Gets the container used by the application
            </summary>
        </member>
        <member name="T:Bifrost.Events.MethodEvent">
            <summary>
            Represents an event that represents a method on a domain object
            </summary>
        </member>
        <member name="T:Bifrost.Events.Event">
            <summary>
            Represents an event
            </summary>
        </member>
        <member name="T:Bifrost.Events.IEvent">
            <summary>
            Defines the basics of an event
            </summary>
        </member>
        <member name="P:Bifrost.Events.IEvent.Id">
            <summary>
            Gets the id of the event
            </summary>
        </member>
        <member name="P:Bifrost.Events.IEvent.CommandName">
            <summary>
            Gets or sets the name of the command causing the event
            </summary>
        </member>
        <member name="P:Bifrost.Events.IEvent.Name">
            <summary>
            Gets or sets the name of the event
            </summary>
        </member>
        <member name="P:Bifrost.Events.IEvent.EventSourceId">
            <summary>
            Gets the EventSource id (Aggregate Root) to which these events belong.
            </summary>
        </member>
        <member name="P:Bifrost.Events.IEvent.AggregatedRoot">
            <summary>
            Gets and sets the aggregated root name
            </summary>
        </member>
        <member name="P:Bifrost.Events.IEvent.EventSourceName">
            <summary>
            Gets and sets the name of the eventsource
            </summary>
        </member>
        <member name="P:Bifrost.Events.IEvent.Version">
            <summary>
            Gets or sets the version of the event (ChangeSet or something)
            </summary>
        </member>
        <member name="P:Bifrost.Events.IEvent.CausedBy">
            <summary>
            Gets or sets who or what the event was caused by.
            
            Typically this would be the name of the user or system causing it
            </summary>
        </member>
        <member name="P:Bifrost.Events.IEvent.Origin">
            <summary>
            Gets or sets the origin of the event.
            
            Typically this would be what part of the system the event indirectly is coming from
            </summary>
        </member>
        <member name="P:Bifrost.Events.IEvent.Occured">
            <summary>
            Gets or sets the time the event occured
            </summary>
        </member>
        <member name="M:Bifrost.Events.Event.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Events.Event">Event</see>
            </summary>
        </member>
        <member name="M:Bifrost.Events.Event.#ctor(System.Guid,System.Guid)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Events.Event">Event</see> setting the event id directly.  This is required for event versioning.
            </summary>
        </member>
        <member name="M:Bifrost.Events.Event.Equals(System.Object)">
            <summary>
            Compares the event with another event, but will skip properties that are on the <see cref="T:Bifrost.Events.IEvent"/> interface
            </summary>
            <param name="obj">The other event to compare to</param>
            <returns>True if equal, false if not</returns>
            <remarks>
            Passing in an event of a different type automatically result in false
            </remarks>
        </member>
        <member name="M:Bifrost.Events.MethodEvent.#ctor(System.Guid,System.Reflection.MethodInfo)">
            <summary>
            Constructs a MethodEvent based upon a MethodInfo
            </summary>
            <param name="eventSourceId">Id of the event source</param>
            <param name="methodInfo"></param>
        </member>
        <member name="P:Bifrost.Events.MethodEvent.Arguments">
            <summary>
            Gets the arguments for the method
            </summary>
        </member>
        <member name="T:Bifrost.Events.IEventSource">
            <summary>
            An EventSource is a domain object that is capable of generating and applying events.  It is an AggregateRoot in the context
            of event sourcing.
            </summary>
        </member>
        <member name="M:Bifrost.Events.IEventSource.Apply(Bifrost.Events.IEvent)">
            <summary>
            Apply a new event to the EventSource.  This will be applied and added to the <see cref="P:Bifrost.Events.IEventSource.UncommittedEvents">UncommitedEvents</see>.
            </summary>
            <param name="event">The event that is to be applied</param>
        </member>
        <member name="M:Bifrost.Events.IEventSource.Apply(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Apply a new event based upon a method to the EventSource. This will applied and added to the <see cref="P:Bifrost.Events.IEventSource.UncommittedEvents">UncommitedEvents</see>
            </summary>
            <param name="expression">Expression pointing to a method to use for applying the event</param>
        </member>
        <member name="M:Bifrost.Events.IEventSource.ReApply(Bifrost.Events.CommittedEventStream)">
            <summary>
            Reapply an event from a stream
            </summary>
            <param name="eventStream">Stream that contains the events to reapply</param>
        </member>
        <member name="M:Bifrost.Events.IEventSource.FastForward(Bifrost.Events.EventSourceVersion)">
            <summary>
            Fast forward to the specified version of the <seealso cref="T:Bifrost.Events.EventSource">EventSource</seealso>
            </summary>
            <param name="lastVersion">Version to fast foward to</param>
        </member>
        <member name="P:Bifrost.Events.IEventSource.Id">
            <summary>
            The Id of the Event Source.  
            </summary>
        </member>
        <member name="P:Bifrost.Events.IEventSource.Version">
            <summary>
            Gets the version of this EventSource
            </summary>
        </member>
        <member name="P:Bifrost.Events.IEventSource.UncommittedEvents">
            <summary>
            A stream of events that have been applied to the <seealso cref="T:Bifrost.Events.EventSource">EventSource</seealso> but have not yet been committed to the EventStore.
            </summary>
        </member>
        <member name="T:Bifrost.Domain.IOriginator">
            <summary>
            Defines an origin, typically for aggregated roots when needing to create mementos and set them
            </summary>
        </member>
        <member name="M:Bifrost.Domain.IOriginator.CreateMemento">
            <summary>
            Create memento
            </summary>
            <returns>The actual memento</returns>
        </member>
        <member name="M:Bifrost.Domain.IOriginator.SetMemento(Bifrost.Domain.IMemento)">
            <summary>
            Set mememoty
            </summary>
            <param name="memento">The actual memento to set</param>
        </member>
        <member name="T:Bifrost.Commands.CommandContext">
            <summary>
            Represents a <see cref="T:Bifrost.Commands.ICommandContext">ICommandContext</see>
            </summary>
        </member>
        <member name="T:Bifrost.Commands.ICommandContext">
            <summary>
            Defines a context for a <see cref="T:Bifrost.Commands.ICommand">command</see> passing through
            the system
            </summary>
        </member>
        <member name="T:Bifrost.Lifecycle.IUnitOfWork">
            <summary>
            Defines a unit of work
            </summary>
        </member>
        <member name="M:Bifrost.Lifecycle.IUnitOfWork.Commit">
            <summary>
            Commit the unit of work
            </summary>
        </member>
        <member name="M:Bifrost.Lifecycle.IUnitOfWork.Rollback">
            <summary>
            Rollback to the state when the unit of work started
            </summary>
        </member>
        <member name="M:Bifrost.Commands.ICommandContext.RegisterForTracking(Bifrost.Domain.IAggregatedRoot)">
            <summary>
            Register an aggregated root for tracking
            </summary>
            <param name="aggregatedRoot">Aggregated root to track</param>
        </member>
        <member name="M:Bifrost.Commands.ICommandContext.GetObjectsBeingTracked">
            <summary>
            Get objects that are being tracked
            </summary>
            <returns>All tracked objects</returns>
        </member>
        <member name="P:Bifrost.Commands.ICommandContext.Command">
            <summary>
            Gets the <see cref="T:Bifrost.Commands.ICommand">command</see> the context is for
            </summary>
        </member>
        <member name="P:Bifrost.Commands.ICommandContext.ExecutionContext">
            <summary>
            Gets the <see cref="T:Bifrost.Execution.IExecutionContext"/> for the command
            </summary>
        </member>
        <member name="P:Bifrost.Commands.ICommandContext.EventStores">
            <summary>
            Gets the <see cref="T:Bifrost.Events.IEventStore">EventStores</see> to use for the <see cref="T:Bifrost.Commands.ICommandContext"/>
            </summary>
        </member>
        <member name="M:Bifrost.Commands.CommandContext.#ctor(Bifrost.Commands.ICommand,Bifrost.Execution.IExecutionContext,Bifrost.Events.IEventStore)">
            <summary>
            Initializes a new <see cref="T:Bifrost.Commands.CommandContext">CommandContext</see>
            </summary>
            <param name="command">The <see cref="T:Bifrost.Commands.ICommand">command</see> the context is for</param>
            <param name="executionContext">The <see cref="T:Bifrost.Execution.IExecutionContext"/> for the command</param>
            <param name="eventStore">The <see cref="T:Bifrost.Events.IEventStore">event store</see> that will get all the events and persist them</param>
        </member>
        <member name="M:Bifrost.Commands.CommandContext.Dispose">
            <summary>
            Disposes the CommandContext by Committing
            </summary>
        </member>
        <member name="T:Bifrost.Resources.ResourcePropertiesResolver">
            <summary>
            Represents a <see cref="T:Bifrost.Resources.IResourcePropertiesResolver"/>
            </summary>
        </member>
        <member name="T:Bifrost.Resources.IResourcePropertiesResolver">
            <summary>
            Defines a properties resvoler that can resolve any instance properties 
            </summary>
        </member>
        <member name="M:Bifrost.Resources.IResourcePropertiesResolver.ResolvePropertiesFor``1(``0)">
            <summary>
            Resolve all properties for a specific type
            </summary>
            <typeparam name="T">Type to resolve for - can be implicit from the instance</typeparam>
            <param name="instance">Instance to resolve</param>
        </member>
        <member name="M:Bifrost.Resources.ResourcePropertiesResolver.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Resources.ResourcePropertiesResolver"/>
            </summary>
            <param name="serviceLocator"><see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> to use</param>
        </member>
        <member name="T:Bifrost.Resources.ResourceInterceptor">
            <summary>
            Represents an <see cref="T:Castle.DynamicProxy.IInterceptor"/> for intercepting properties in a class implementing <see cref="T:Bifrost.Resources.IHaveResources"/>
            </summary>
        </member>
        <member name="M:Bifrost.Resources.ResourceInterceptor.#ctor(Bifrost.Resources.IResourceResolver)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Resources.ResourceInterceptor"/>
            </summary>
            <param name="resolver"></param>
        </member>
        <member name="T:Bifrost.Domain.AggregatedRootCommand`1">
            <summary>
            Represents a implementation of <see cref="T:Bifrost.Commands.ICommandForType`1">ICommandForType</see>
            targetting <see cref="T:Bifrost.Domain.AggregatedRoot">AggregatedRoots</see>
            </summary>
            <typeparam name="T">Type of aggregated root the command is targetting</typeparam>
        </member>
        <member name="T:Bifrost.Commands.ICommandForType`1">
            <summary>
            Defines a special <see cref="T:Bifrost.Commands.ICommand">command</see> that is targetted towards a specific type
            
            Inherit from this if you want to specify a specific type the command is targetted towards.
            </summary>
            <typeparam name="T">Type the command is targetted towards</typeparam>
            <remarks>
            Typically one can target an <see cref="T:Bifrost.Domain.AggregatedRoot">AggregatedRoot</see>
            </remarks>
        </member>
        <member name="T:Bifrost.Commands.ICommand">
            <summary>
            Defines the basic command
            </summary>
        </member>
        <member name="P:Bifrost.Commands.ICommand.Id">
            <summary>
            Gets the Id of the object the command will apply to
            </summary>
        </member>
        <member name="T:Bifrost.Events.EventMigratorManager">
            <summary>
            Represents a <see cref="T:Bifrost.Events.IEventMigratorManager">IEventMigratorManager</see>
            </summary>
            <remarks>
            The manager will automatically import any <see cref="T:Bifrost.Events.IEventMigrator`2">IEventMigrator</see>
            and use them when migrating
            </remarks>
        </member>
        <member name="T:Bifrost.Events.IEventMigratorManager">
             <summary>
             Defines the functionality for a manager that handles the migration of events from older generations to newer generations.
            
             Migrates an <see cref="T:Bifrost.Events.IEvent">Event</see> to the current generation
             </summary>
        </member>
        <member name="M:Bifrost.Events.IEventMigratorManager.Migrate(Bifrost.Events.IEvent)">
            <summary>
            Migrates an event from the particular generation to the current generation of the event
            </summary>
            <param name="source">A previous generation of the event</param>
            <returns>The current generation of the event</returns>
        </member>
        <member name="M:Bifrost.Events.EventMigratorManager.#ctor(Bifrost.Execution.ITypeDiscoverer,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Events.EventMigratorManager">EventMigratorManager</see>
            </summary>
            <param name="typeDiscoverer"></param>
            <param name="serviceLocator"></param>
        </member>
        <member name="M:Bifrost.Events.EventMigratorManager.RegisterMigrator(System.Type)">
            <summary>
            Register a migrator
            </summary>
            <param name="migratorType">Type of migrator to register</param>
        </member>
        <member name="T:Bifrost.Sagas.ChapterAlreadyExistException">
            <summary>
            The exception that is thrown if a <see cref="T:Bifrost.Sagas.IChapter"/> already exists within a <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
        </member>
        <member name="T:Bifrost.Tenancy.Tenant">
            <summary>
            Represents a tenant in the system
            </summary>
        </member>
        <member name="T:Bifrost.Sagas.SagaLibrarian">
            <summary>
            Represents a <see cref="T:Bifrost.Sagas.ISagaLibrarian"/>
            </summary>
        </member>
        <member name="T:Bifrost.Sagas.ISagaLibrarian">
            <summary>
            Defines a librarian for handling sagas
            
            The purpose of the librarian is to persist and get a <see cref="T:Bifrost.Sagas.ISaga"/> or multiple
            sagas
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.ISagaLibrarian.Close(Bifrost.Sagas.ISaga)">
            <summary>
            Close a <see cref="T:Bifrost.Sagas.ISaga"/> permanently
            </summary>
            <param name="saga"><see cref="T:Bifrost.Sagas.ISaga"/> to close</param>
        </member>
        <member name="M:Bifrost.Sagas.ISagaLibrarian.Catalogue(Bifrost.Sagas.ISaga)">
            <summary>
            Catalogue saga to the library
            </summary>
            <param name="saga"><see cref="T:Bifrost.Sagas.ISaga"/> to record</param>
        </member>
        <member name="M:Bifrost.Sagas.ISagaLibrarian.Get(System.Guid)">
            <summary>
            Get a <see cref="T:Bifrost.Sagas.ISaga"/> based on its id
            </summary>
            <param name="id">Id of saga to get</param>
            <returns>An instance of the <see cref="T:Bifrost.Sagas.ISaga"/></returns>
        </member>
        <member name="M:Bifrost.Sagas.ISagaLibrarian.Get(System.String,System.String)">
            <summary>
            Get a <see cref="T:Bifrost.Sagas.ISaga"/> based on the partition its in and key
            </summary>
            <param name="partition">Partition identifier</param>
            <param name="key">Unique partition key</param>
            <returns>An instance of the <see cref="T:Bifrost.Sagas.ISaga"/></returns>
        </member>
        <member name="M:Bifrost.Sagas.ISagaLibrarian.GetForPartition(System.String)">
            <summary>
            Get all sagas within a given partition
            </summary>
            <param name="partition">Partition identifier</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Bifrost.Sagas.ISaga"/> with all sagas in the given partition</returns>
        </member>
        <member name="M:Bifrost.Sagas.SagaLibrarian.#ctor(Bifrost.Entities.IEntityContext{Bifrost.Sagas.SagaHolder},Bifrost.Sagas.ISagaConverter)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Sagas.SagaLibrarian"/>
            </summary>
            <param name="entityContext">A <see cref="T:Bifrost.Entities.IEntityContext`1"/> to use for working with persisting and resuming <see cref="T:Bifrost.Sagas.ISaga">Sagas</see></param>
            <param name="sagaConverter">A <see cref="T:Bifrost.Sagas.ISagaConverter"/> for converting a <see cref="T:Bifrost.Sagas.ISaga"/> to a <see cref="T:Bifrost.Sagas.SagaHolder"/> and back</param>
        </member>
        <member name="T:Bifrost.Sagas.SagaConverter">
            <summary>
            Represents a <see cref="T:Bifrost.Sagas.ISagaConverter"/>
            </summary>
        </member>
        <member name="T:Bifrost.Sagas.ISagaConverter">
            <summary>
            Defines a converter for converting a <see cref="T:Bifrost.Sagas.ISaga"/> to a <see cref="T:Bifrost.Sagas.SagaHolder"/> and back
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.ISagaConverter.ToSaga(Bifrost.Sagas.SagaHolder)">
            <summary>
            Convert a <see cref="T:Bifrost.Sagas.SagaHolder"/> to a <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
            <param name="sagaHolder"><see cref="T:Bifrost.Sagas.SagaHolder"/> to convert from</param>
            <returns>Converter <see cref="T:Bifrost.Sagas.ISaga"/> in the correct type</returns>
        </member>
        <member name="M:Bifrost.Sagas.ISagaConverter.ToSagaHolder(Bifrost.Sagas.ISaga)">
            <summary>
            Convert a <see cref="T:Bifrost.Sagas.ISaga"/> to a <see cref="T:Bifrost.Sagas.SagaHolder"/>
            </summary>
            <param name="saga"><see cref="T:Bifrost.Sagas.ISaga"/> to convert from</param>
            <returns>A <see cref="T:Bifrost.Sagas.SagaHolder"/> with the <see cref="T:Bifrost.Sagas.ISaga"/> and its data serialized</returns>
        </member>
        <member name="M:Bifrost.Sagas.ISagaConverter.Populate(Bifrost.Sagas.SagaHolder,Bifrost.Sagas.ISaga)">
            <summary>
            Populate an existing <see cref="T:Bifrost.Sagas.SagaHolder"/> from a <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
            <param name="sagaHolder"><see cref="T:Bifrost.Sagas.SagaHolder"/> to populate into</param>
            <param name="saga"><see cref="T:Bifrost.Sagas.ISaga"/> to populate the <see cref="T:Bifrost.Sagas.SagaHolder"/> with</param>
        </member>
        <member name="M:Bifrost.Sagas.SagaConverter.#ctor(Bifrost.Execution.IContainer,Bifrost.Events.IEventConverter,Bifrost.Serialization.ISerializer)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Sagas.SagaConverter"/>
            </summary>
            <param name="container">A <see cref="T:Bifrost.Execution.IContainer"/> for creating instances of types</param>
            <param name="eventConverter">A <see cref="T:Bifrost.Events.IEventConverter"/> for converting any <see cref="T:Bifrost.Events.IEvent">events</see> in a <see cref="T:Bifrost.Sagas.ISaga"/></param>
            <param name="serializer">A <see cref="T:Bifrost.Serialization.ISerializer"/> to use for serialization</param>
        </member>
        <member name="T:Bifrost.Events.IEventStoreChangeListener">
            <summary>
            Defines a listener for changes occuring on a <see cref="T:Bifrost.Events.IEventStore"/>
            </summary>
        </member>
        <member name="T:Bifrost.Events.EventSubscriptionHolder">
            <summary>
            Represents a holder of an <see cref="T:Bifrost.Events.EventSubscription"/>
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventSubscriptionHolder.Id">
            <summary>
            Gets or sets the Id of the <see cref="T:Bifrost.Events.EventSubscription"/>
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventSubscriptionHolder.Owner">
            <summary>
            Gets or sets the owner type, typically defined as the <see cref="T:Bifrost.Events.EventSource"/>
            </summary>
            <remarks>
            Fully qualified assembly name of type
            </remarks>
        </member>
        <member name="P:Bifrost.Events.EventSubscriptionHolder.Method">
            <summary>
            Gets or sets the name of the method that is subscribing to the event
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventSubscriptionHolder.EventType">
            <summary>
            Gets or sets the type of the event
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventSubscriptionHolder.EventName">
            <summary>
            Gets or sets the logical name of the event
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventSubscriptionHolder.EventSourceVersions">
            <summary>
            Gets or sets the version of the event source that the event originated from
            </summary>
        </member>
        <member name="T:Bifrost.Domain.IAggregatedRootRepository">
            <summary>
            Defines the basic functionality for finding and getting aggregated roots
            </summary>
        </member>
        <member name="M:Bifrost.Domain.IAggregatedRootRepository.Get(System.Guid)">
            <summary>
            Get an aggregated root by id
            </summary>
            <returns>An instance of the aggregated root</returns>
            <exception cref="T:Bifrost.Domain.MissingAggregatedRootException">Thrown if aggregated root does not exist</exception>
        </member>
        <member name="T:Bifrost.Domain.IAggregatedRootRepository`1">
            <summary>
            Defines the basic functionality for finding and getting aggregated roots
            </summary>
            <typeparam name="T">Type of aggregated root</typeparam>
        </member>
        <member name="M:Bifrost.Domain.IAggregatedRootRepository`1.Get(System.Guid)">
            <summary>
            Get an aggregated root by id
            </summary>
            <param name="id">Id of aggregated root to get</param>
            <returns>An instance of the aggregated root</returns>
            <exception cref="T:Bifrost.Domain.MissingAggregatedRootException">Thrown if aggregated root does not exist</exception>
        </member>
        <member name="T:Bifrost.Domain.AggregatedRootRepository`1">
            <summary>
            Defines a concrete implementation of <see cref="T:Bifrost.Domain.IAggregatedRootRepository`1">IAggregatedRootRepository</see>
            </summary>
            <typeparam name="T">Type the repository is for</typeparam>
        </member>
        <member name="M:Bifrost.Domain.AggregatedRootRepository`1.#ctor(Bifrost.Commands.ICommandContextManager)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Domain.AggregatedRootRepository`1">AggregatedRootRepository</see>
            </summary>
            <param name="commandContextManager"> <see cref="T:Bifrost.Commands.ICommandContextManager"/> to use for tracking </param>
        </member>
        <member name="T:Bifrost.Domain.AggregatedRoot">
            <summary>
            Represents the base class used for aggregated roots in your domain
            </summary>
        </member>
        <member name="T:Bifrost.Events.EventSource">
             <summary>
             Represents a <see cref="T:Bifrost.Events.IEventSource">IEventSource</see>
            
             This is a base abstract class for any EventSource
             </summary>
        </member>
        <member name="M:Bifrost.Events.EventSource.#ctor(System.Guid)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Events.EventSource">EventSource</see>
            </summary>
            <param name="id">Id of the event source</param>
        </member>
        <member name="P:Bifrost.Events.EventSource.AggregatedRootType">
            <summary>
            Get the aggregated root type
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventSource.EventSourceType">
            <summary>
            Get the event source type
            </summary>
        </member>
        <member name="T:Bifrost.Domain.IAggregatedRoot">
            <summary>
            Defines the very basic functionality needed for an aggregated root
            </summary>
        </member>
        <member name="M:Bifrost.Domain.AggregatedRoot.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of an <see cref="T:Bifrost.Domain.AggregatedRoot">AggregatedRoot</see>
            </summary>
            <param name="id">Id of the AggregatedRoot</param>
        </member>
        <member name="T:Bifrost.Configuration.IEntityContextConfiguration">
            <summary>
            Defines a configuration set for an <see cref="T:Bifrost.Entities.IEntityContext`1">EntityContext</see> implementation
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IEntityContextConfiguration.EntityContextType">
            <summary>
            Gets the EntityContext type
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IEntityContextConfiguration.Connection">
            <summary>
            Gets or sets the connection information for the entity context
            </summary>
        </member>
        <member name="T:Bifrost.Events.IAmNextGenerationOf`1">
            <summary>
            Defines an event which is the subsequent generation of the <see cref="T:Bifrost.Events.IEvent">Event</see>
            </summary>
            <typeparam name="T">The previous generation of this event which this event supercedes</typeparam>
        </member>
        <member name="T:Bifrost.Validation.ICanValidate`1">
            <summary>
            Defines the behavior of being able to do validation
            </summary>
            <typeparam name="T">Type it can validate</typeparam>
        </member>
        <member name="T:Bifrost.Validation.ChapterValidatorProvider">
            <summary>
            Represents a <see cref="T:Bifrost.Validation.IChapterValidatorProvider"/> for providing chapter validators
            </summary>
        </member>
        <member name="T:Bifrost.Validation.IChapterValidatorProvider">
            <summary>
            Defines a provider that returns chapter-specific validators
            </summary>
        </member>
        <member name="M:Bifrost.Validation.IChapterValidatorProvider.GetValidatorFor(Bifrost.Sagas.IChapter)">
            <summary>
            Retrieves an validator specific to the chapter
            </summary>
            <param name="chapter">Chapter to be validates</param>
            <returns>Returns specific validator or a NullValidator if no validator is available</returns>
        </member>
        <member name="M:Bifrost.Validation.IChapterValidatorProvider.GetValidatorFor(System.Type)">
            <summary>
            Retrieves an validator specific to the chapter type
            </summary>
            <param name="type">Type of the Chapter to be validates</param>
            <returns>Returns specific validator or a NullValidator if no validator is available</returns>
        </member>
        <member name="M:Bifrost.Validation.ChapterValidatorProvider.#ctor(Bifrost.Execution.ITypeDiscoverer,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Validation.ChapterValidatorProvider"/> ChapterValidatorProvider
            </summary>
            <param name="typeDiscoverer">An instance of ITypeDiscoverer to help identify and register <see cref="T:Bifrost.Validation.IChapterValidator"> IChapterValidator</see> implementations
            </param>
            <param name="serviceLocator">An instance of IServiceLocator to return concrete instances of validators</param>
        </member>
        <member name="T:Bifrost.Configuration.Xml.StorageElement">
            <summary>
            Represents a configuration element for storage
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.Xml.IConfigElement">
            <summary>
            Defines a config element in Xml
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.Xml.StorageElement.GetConfiguration">
            <summary>
            Get the <see cref="T:Bifrost.Configuration.IEntityContextConfiguration"/> for the given configuration
            </summary>
            <returns>An instance of <see cref="T:Bifrost.Configuration.IEntityContextConfiguration"/></returns>
        </member>
        <member name="T:Bifrost.Sagas.SagaHolder">
            <summary>
            Represents a holder for a <see cref="T:Bifrost.Sagas.ISaga"/> for persisting purposes
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.SagaHolder.Id">
            <summary>
            Gets or sets the Id of the actual <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.SagaHolder.Partition">
            <summary>
            Gets or sets the Partition in which the <see cref="T:Bifrost.Sagas.ISaga"/> belongs to
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.SagaHolder.Key">
            <summary>
            Gets or sets the Key that represents the <see cref="T:Bifrost.Sagas.ISaga"/> within a partition
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.SagaHolder.Name">
            <summary>
            Gets or sets the name of the <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.SagaHolder.Type">
            <summary>
            Gets or sets the type of the <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
            <remarks>
            Fully qualified type string
            </remarks>
        </member>
        <member name="P:Bifrost.Sagas.SagaHolder.State">
            <summary>
            Gets or sets the <see cref="T:Bifrost.Sagas.SagaState"/> represented as string
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.SagaHolder.SerializedSaga">
            <summary>
            Gets or sets the serialized version of the <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.SagaHolder.CurrentChapterType">
            <summary>
            Gets or sets the current chapters type
            </summary>
            <remarks>
            Fully qualified type string
            </remarks>
        </member>
        <member name="P:Bifrost.Sagas.SagaHolder.SerializedChapters">
            <summary>
            Gets or sets the chapters as serialized data
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.SagaHolder.UncommittedEvents">
            <summary>
            Gets or sets the uncommited events as serialized data
            </summary>
        </member>
        <member name="T:Bifrost.Serialization.SerializationOptions">
            <summary>
            Represents the options for serialization
            </summary>
        </member>
        <member name="F:Bifrost.Serialization.SerializationOptions.ShouldSerializeProperty">
            <summary>
            A func that gets called during serialization of properties to decide 
            </summary>
        </member>
        <member name="T:Bifrost.Execution.IExecutionContextManager">
            <summary>
            Defines a manager for managing <see cref="T:Bifrost.Execution.IExecutionContext">ExecutionContexts</see>
            </summary>
        </member>
        <member name="M:Bifrost.Execution.IExecutionContextManager.Reset">
            <summary>
            Reset the context
            </summary>
        </member>
        <member name="P:Bifrost.Execution.IExecutionContextManager.Current">
            <summary>
            Get the current <see cref="T:Bifrost.Execution.IExecutionContext"/>
            </summary>
        </member>
        <member name="T:Bifrost.Events.IProcessMethodInvoker">
            <summary>
            Defines an invoker for handle methods - it should recognize methods called Handle and be able to 
            call them
            </summary>
            <remarks>
            This is a convention were a type implementing methods called Handle taking specific commands in.
            </remarks>
        </member>
        <member name="M:Bifrost.Events.IProcessMethodInvoker.TryProcess(System.Object,Bifrost.Events.IEvent)">
            <summary>
            Try to call handle method for a specific command
            </summary>
            <param name="instance">Instance to try to call Handle method on</param>
            <param name="event">The <see cref="T:Bifrost.Events.IEvent"/> that the Process method should take</param>
            <returns>True if it called the Handle method, false if not</returns>
        </member>
        <member name="M:Bifrost.Events.IProcessMethodInvoker.Register(System.Type)">
            <summary>
            Register a type that should have Handle method(s) in it
            </summary>
            <param name="typeWithProcessMethods">Type to register</param>
        </member>
        <member name="T:Bifrost.Configuration.ViewsConfiguration">
            <summary>
            Represents an <see cref="T:Bifrost.Configuration.IViewsConfiguration"/>
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.IViewsConfiguration">
            <summary>
            Defines the configuration for views
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.IStorageConfiguration">
            <summary>
            Defines a generic storage configuration
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IStorageConfiguration.Storage">
            <summary>
            Gets or sets the configuration for storage
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.IViewsConfiguration.Initialize(Bifrost.Configuration.IConfigure)">
            <summary>
            Initialize the configuration
            </summary>
            <param name="configure"><see cref="T:Bifrost.Configuration.IConfigure"/> instance to configure</param>
        </member>
        <member name="P:Bifrost.Configuration.ViewsConfiguration.Storage">
            <summary>
            Gets and sets an instance of the <see cref="T:Bifrost.Configuration.IEntityContextConfiguration"/>
            </summary>
        </member>
        <member name="T:Bifrost.Commands.IDynamicCommandFactory">
            <summary>
            Defines a factory for creating <see cref="T:Bifrost.Commands.DynamicCommand">DynamicCommands</see>
            </summary>
        </member>
        <member name="M:Bifrost.Commands.IDynamicCommandFactory.Create``1(System.Guid,System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Create a command from an expression describing a method for the dynamic command
            </summary>
            <typeparam name="T"><see cref="T:Bifrost.Domain.AggregatedRoot"/> type to create for </typeparam>
            <param name="aggregatedRootId">Id of the <see cref="T:Bifrost.Domain.AggregatedRoot"/></param>
            <param name="method"><see cref="T:System.Linq.Expressions.Expression"/> expressing the method call</param>
            <returns>A <see cref="T:Bifrost.Commands.DynamicCommand"/> holding information about the command</returns>
        </member>
        <member name="T:Bifrost.Commands.DynamicCommandFactory">
            <summary>
            Represents an implementation of <see cref="T:Bifrost.Commands.IDynamicCommandFactory"/>
            </summary>
        </member>
        <member name="T:Bifrost.Execution.ITypeDiscoverer">
            <summary>
            Discovers types based upon basetypes
            </summary>
        </member>
        <member name="M:Bifrost.Execution.ITypeDiscoverer.GetAll">
            <summary>
            Returns all discovered types
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> with all the types discovered</returns>
        </member>
        <member name="M:Bifrost.Execution.ITypeDiscoverer.FindSingle``1">
            <summary>
            Find a single implementation of a basetype
            </summary>
            <typeparam name="T">Basetype to find for</typeparam>
            <returns>Type found</returns>
            <remarks>
            If the base type is an interface, it will look for any types implementing the interface.
            If it is a class, it will find anyone inheriting from that class
            </remarks>
            <exception cref="T:System.ArgumentException">If there is more than one instance found</exception>
        </member>
        <member name="M:Bifrost.Execution.ITypeDiscoverer.FindMultiple``1">
            <summary>
            Find multiple implementations of a basetype
            </summary>
            <typeparam name="T">Basetype to find for</typeparam>
            <returns>All types implementing or inheriting from the given basetype</returns>
            <remarks>
            If the base type is an interface, it will look for any types implementing the interface.
            If it is a class, it will find anyone inheriting from that class
            </remarks>
        </member>
        <member name="M:Bifrost.Execution.ITypeDiscoverer.FindSingle(System.Type)">
            <summary>
            Find a single implementation of a basetype
            </summary>
            <param name="type">Basetype to find for</param>
            <returns>Type found</returns>
            <remarks>
            If the base type is an interface, it will look for any types implementing the interface.
            If it is a class, it will find anyone inheriting from that class
            </remarks>
            <exception cref="T:System.ArgumentException">If there is more than one instance found</exception>
        </member>
        <member name="M:Bifrost.Execution.ITypeDiscoverer.FindMultiple(System.Type)">
            <summary>
            Find multiple implementations of a basetype
            </summary>
            <param name="type">Basetype to find for</param>
            <returns>All types implementing or inheriting from the given basetype</returns>
            <remarks>
            If the base type is an interface, it will look for any types implementing the interface.
            If it is a class, it will find anyone inheriting from that class
            </remarks>
        </member>
        <member name="T:Bifrost.Resources.ResourceConvention">
            <summary>
            Represents a <see cref="T:Bifrost.Execution.IBindingConvention"/> that resolves anything implementing <see cref="T:Bifrost.Resources.IHaveResources"/>
            </summary>
        </member>
        <member name="T:Bifrost.Execution.BaseConvention">
            <summary>
            Defines a base abstract class for Binding conventions for any <see cref="T:Bifrost.Execution.IContainer"/>
            </summary>
        </member>
        <member name="T:Bifrost.Execution.IBindingConvention">
            <summary>
            Defines the basic functionality for a convention that can be applied
            to bindings for a <see cref="T:Bifrost.Execution.IContainer"/>
            </summary>
        </member>
        <member name="M:Bifrost.Execution.IBindingConvention.CanResolve(System.Type)">
            <summary>
            Checks wether or not a given <see cref="T:System.Type">Service</see> can be resolved by the convention
            </summary>
            <param name="service">Service that needs to be resolved</param>
            <returns>True if it can resolve it, false if not</returns>
        </member>
        <member name="M:Bifrost.Execution.IBindingConvention.Resolve(Bifrost.Execution.IContainer,System.Type)">
            <summary>
            Resolve a <see cref="T:System.Type">Service</see>
            </summary>
            <param name="container">Container to resolve binding for</param>
            <param name="service">Service that needs to be resolved</param>
        </member>
        <member name="M:Bifrost.Execution.BaseConvention.GetScopeForTarget(System.Type)">
            <summary>
            Handle scope for a target type
            </summary>
            <param name="targetType">Target type</param>
            <returns><see cref="T:Bifrost.Execution.BindingLifecycle"/> for the target type</returns>
            <remarks>
            If the target is marked with the <see cref="T:Bifrost.Execution.SingletonAttribute">Singleton</see> attribute, it will use
            that scope instead, as that is a explicit implementation information.
            
            Otherwise it will use the DefaultScope
            </remarks>
        </member>
        <member name="P:Bifrost.Execution.BaseConvention.DefaultScope">
            <summary>
            Gets or sets the <see cref="T:Bifrost.Execution.BindingLifecycle">ActivationScope</see> that will be used as default
            </summary>
        </member>
        <member name="M:Bifrost.Resources.ResourceConvention.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Resources.ResourceConvention"/>
            </summary>
        </member>
        <member name="T:Bifrost.Resources.IResourceResolver">
            <summary>
            Defines the functionality needed by a Resource Resolver
            </summary>
        </member>
        <member name="M:Bifrost.Resources.IResourceResolver.Resolve(System.String)">
            <summary>
            Resolve a string resource based upon name
            </summary>
            <param name="name">Name of resource</param>
            <returns>A resolved resource string</returns>
        </member>
        <member name="T:Bifrost.Execution.MultipleTypesFoundException">
            <summary>
            The exception that is thrown when multiple types are found and not allowed
            </summary>
        </member>
        <member name="M:Bifrost.Execution.MultipleTypesFoundException.#ctor">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Execution.MultipleTypesFoundException"/>
            </summary>
        </member>
        <member name="M:Bifrost.Execution.MultipleTypesFoundException.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Execution.MultipleTypesFoundException"/>
            </summary>
            <param name="message">Message with details about the exception</param>
        </member>
        <member name="T:Bifrost.Validation.ICommandInputValidator">
            <summary>
            Defines a basic input level validator for a Command
            </summary>
        </member>
        <member name="M:Bifrost.Validation.ICommandInputValidator.ValidateInput(Bifrost.Commands.ICommand)">
            <summary>
            Validates that a command has all the properties that are required for the command to succeed.
            </summary>
            <param name="command">The command to validate</param>
            <remarks>
            Only validates the type / presence / etc. of the properties.  It does not validate that they are correct from a business perspective.
            e.g. validates that we have a valid user id but not that this user id actually exists.
            </remarks>
            <returns>A collection of ValidationResults.  An empty collection indicates a valid command.</returns>
        </member>
        <member name="T:Bifrost.Commands.CommandHandlerInvoker">
            <summary>
            Represents a <see cref="T:Bifrost.Commands.ICommandHandlerInvoker">ICommandHandlerInvoker</see> for handling
            command handlers that have methods called Handle() and takes specific <see cref="T:Bifrost.Commands.ICommand">commands</see>
            in as parameters
            </summary>
        </member>
        <member name="T:Bifrost.Commands.ICommandHandlerInvoker">
            <summary>
            Invokes a command for a command handler type
            </summary>
            <remarks>
            Typically, the default invoker handles the generic
            <see cref="T:Bifrost.Commands.ICommandHandler">command handlers</see>
            </remarks>
        </member>
        <member name="M:Bifrost.Commands.ICommandHandlerInvoker.TryHandle(Bifrost.Commands.ICommand)">
            <summary>
            Try to handle a command
            
            If it can handle it, it should handle it - and return true
            if it handled it and false if not
            </summary>
            <param name="command"><see cref="T:Bifrost.Commands.ICommand">Command to handle</see></param>
            <returns>True if it handled it, false if not</returns>
        </member>
        <member name="M:Bifrost.Commands.CommandHandlerInvoker.#ctor(Bifrost.Execution.ITypeDiscoverer,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Commands.CommandHandlerInvoker">CommandHandlerInvoker</see>
            </summary>
            <param name="discoverer">A <see cref="T:Bifrost.Execution.ITypeDiscoverer"/> to use for discovering <see cref="T:Bifrost.Commands.ICommandHandler">command handlers</see></param>
            <param name="serviceLocator">A <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> to use for getting instances of objects</param>
        </member>
        <member name="M:Bifrost.Commands.CommandHandlerInvoker.Register(System.Type)">
            <summary>
            Register a command handler explicitly 
            </summary>
            <param name="handlerType"></param>
            <remarks>
            The registration process will look into the handler and find methods that 
            are called Handle() and takes a command as parameter
            </remarks>
        </member>
        <member name="T:Bifrost.Validation.CommandBusinessValidator`1">
            <summary>
            Base class to inherit from for basic business-rule validation of a command.
            </summary>
            <remarks>
            Commands inherting from this base class will be automatically registered.
            </remarks>
            <typeparam name="T">Concrete type of the Command to validate</typeparam>
        </member>
        <member name="T:Bifrost.Validation.ICommandBusinessValidator">
            <summary>
             Defines a basic business-rule validator for a Command
            </summary>
        </member>
        <member name="M:Bifrost.Validation.ICommandBusinessValidator.Validate(Bifrost.Commands.ICommand)">
            <summary>
            Validates that a command has all the values that are required for the command to succeed.
            </summary>
            <param name="command">The command to validate</param>
            <remarks>
            Assumes that the command
            </remarks>
            <returns>A collection of ValidationResults.  An empty collection indicates a valid command.</returns>
        </member>
        <member name="M:Bifrost.Validation.CommandBusinessValidator`1.Validate(`0)">
            <summary>
            Abstract Validate method, utilising the concrete type of the command, to be implemented by each Commmand-specific implementation
            </summary>
            <param name="instance">Concrete instance of the command</param>
            <returns>A collection of failed validations</returns>
        </member>
        <member name="T:Bifrost.Sagas.ChapterTransitionHelper">
            <summary>
            Provides helper methods for chapters and transitions
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.ChapterTransitionHelper.CanTransition``2">
            <summary>
            Check if a transition is allowed between to chapters by type
            </summary>
            <typeparam name="TF">From <see cref="T:Bifrost.Sagas.IChapter"/></typeparam>
            <typeparam name="TT">To <see cref="T:Bifrost.Sagas.IChapter"/></typeparam>
            <returns>True if transition is allowed, false if not</returns>
        </member>
        <member name="M:Bifrost.Sagas.ChapterTransitionHelper.CanTransition(Bifrost.Sagas.IChapter,Bifrost.Sagas.IChapter)">
            <summary>
            Check if a transition is allowed between to chapters by instance of chapters
            </summary>
            <param name="fromChapter">From <see cref="T:Bifrost.Sagas.IChapter"/></param>
            <param name="toChapter">To <see cref="T:Bifrost.Sagas.IChapter"/></param>
            <returns>True if transition is allowed, false if not</returns>
        </member>
        <member name="M:Bifrost.Sagas.ChapterTransitionHelper.CanTransition(System.Type,System.Type)">
            <summary>
            Check if a transition is allowed between to chapters by type
            </summary>
            <param name="fromChapterType">From <see cref="T:Bifrost.Sagas.IChapter"/></param>
            <param name="toChapterType">To <see cref="T:Bifrost.Sagas.IChapter"/></param>
            <returns>True if transition is allowed, false if not</returns>
        </member>
        <member name="T:Bifrost.Configuration.Defaults.DefaultBindings">
            <summary>
            Represents a <see cref="T:Bifrost.Configuration.Defaults.IDefaultBindings"/>
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.Defaults.IDefaultBindings">
            <summary>
            Defines a system that sets up default bindings
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.Defaults.IDefaultBindings.Initialize(Bifrost.Execution.IContainer)">
            <summary>
            Initialize the bindings with the given container
            </summary>
            <param name="container">The <see cref="T:Bifrost.Execution.IContainer"/> to define the bindings with</param>
        </member>
        <member name="T:Bifrost.Execution.ReadOnlyObjectException">
            <summary>
            The exception that is thrown when an object is read only and one is writing to it
            </summary>
        </member>
        <member name="T:Bifrost.Events.EventStoreChangeManager">
            <summary>
            Represents a <see cref="T:Bifrost.Events.IEventStoreChangeManager">EventStoreChangeManager</see>
            </summary>
        </member>
        <member name="T:Bifrost.Events.IEventStoreChangeManager">
            <summary>
            Defines a manager for notifying changes to registered notifiers
            </summary>
        </member>
        <member name="M:Bifrost.Events.IEventStoreChangeManager.Register(System.Type)">
            <summary>
            Register a <see cref="T:Bifrost.Events.IEventStoreChangeNotifier"/> that can be notified when changes occur in an event store
            </summary>
            <param name="type">Type of notifier to register, it must however implement the <see cref="T:Bifrost.Events.IEventStoreChangeNotifier"/> interface</param>
        </member>
        <member name="M:Bifrost.Events.IEventStoreChangeManager.NotifyChanges(Bifrost.Events.IEventStore)">
            <summary>
            Notify changes for a given <see cref="T:Bifrost.Events.IEventStore"/>
            </summary>
        </member>
        <member name="M:Bifrost.Events.EventStoreChangeManager.#ctor(Bifrost.Execution.IContainer)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Events.EventStoreChangeManager">EventStoreChangeManager</see>
            </summary>
            <param name="container">An instance of the <see cref="T:Bifrost.Execution.IContainer">Container</see> for dependency resolution</param>
        </member>
        <member name="T:Bifrost.Events.MigrationLevelOutOfRangeException">
            <summary>
            Represents an exception situation where a <see cref="T:Bifrost.Events.EventMigrationHierarchy">EventMigrationHierarchy</see> is
            asked for a concrete type at a level that does not exist.
            
            This could be a level less than 0, or a level greater than the hierarchy depth.
            </summary>
        </member>
        <member name="M:Bifrost.Events.MigrationLevelOutOfRangeException.#ctor">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.MigrationLevelOutOfRangeException">MigrationLevelOutOfRangeException</see>
            </summary>
        </member>
        <member name="M:Bifrost.Events.MigrationLevelOutOfRangeException.#ctor(System.String)">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.MigrationLevelOutOfRangeException">MigrationLevelOutOfRangeException</see>
            </summary>
            <param name="message">Error Message</param>
        </member>
        <member name="M:Bifrost.Events.MigrationLevelOutOfRangeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.MigrationLevelOutOfRangeException">MigrationLevelOutOfRangeException</see>
            </summary>
            <param name="message">Error Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Bifrost.Events.MigrationLevelOutOfRangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.MigrationLevelOutOfRangeException">MigrationLevelOutOfRangeException</see> for serialization
            </summary>
            <param name="serializationInfo">Serialization Info</param>
            <param name="streamingContext">Streaming Context</param>
        </member>
        <member name="T:Bifrost.Events.NotAMigratedEventTypeException">
            <summary>
            Represents an exceptional situation where an <see cref="T:Bifrost.Events.IEvent">Event</see> in an <see cref="T:Bifrost.Events.EventMigrationHierarchy">EventMigrationHierarchy</see>
            has not implemented the correct <see cref="T:Bifrost.Events.IAmNextGenerationOf`1">interface</see>.
            </summary>
        </member>
        <member name="M:Bifrost.Events.NotAMigratedEventTypeException.#ctor">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.NotAMigratedEventTypeException">NotAMigratedEventTypeException</see>
            </summary>
        </member>
        <member name="M:Bifrost.Events.NotAMigratedEventTypeException.#ctor(System.String)">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.NotAMigratedEventTypeException">NotAMigratedEventTypeException</see>
            </summary>
            <param name="message">Error Message</param>
        </member>
        <member name="M:Bifrost.Events.NotAMigratedEventTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.NotAMigratedEventTypeException">NotAMigratedEventTypeException</see>
            </summary>
            <param name="message">Error Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Bifrost.Events.NotAMigratedEventTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.NotAMigratedEventTypeException">NotAMigratedEventTypeException</see> for serialization
            </summary>
            <param name="serializationInfo"></param>
            <param name="streamingContext"></param>
        </member>
        <member name="T:Bifrost.Events.IEventMigrator`2">
            <summary>
            Defines the functionality for a migrator that migrates from an older generation of <see cref="T:Bifrost.Events.IEvent">Event</see> to a newer generation
            </summary>
            <typeparam name="TIn">Older generation of the <see cref="T:Bifrost.Events.IEvent">Event</see> to migrate from</typeparam>
            <typeparam name="TOut">Newer generation of the <see cref="T:Bifrost.Events.IEvent">Event</see> to migrate to</typeparam>
        </member>
        <member name="M:Bifrost.Events.IEventMigrator`2.Migrate(`0)">
            <summary>
            Migrates from the incoming <see cref="T:Bifrost.Events.IEvent">Event</see> to the outgoing <see cref="T:Bifrost.Events.IEvent">Event</see>
            </summary>
            <param name="source">Older version of the <see cref="T:Bifrost.Events.IEvent">Event</see></param>
            <returns>Newer version of the <see cref="T:Bifrost.Events.IEvent">Event</see></returns>
        </member>
        <member name="T:Bifrost.Commands.PersistentCommandContext">
            <summary>
            Represents a persisted <see cref="T:Bifrost.Commands.CommandContext">CommandContext</see>
            </summary>
        </member>
        <member name="P:Bifrost.Commands.PersistentCommandContext.Id">
            <summary>
            Gets or sets the Id of the command
            </summary>
        </member>
        <member name="P:Bifrost.Commands.PersistentCommandContext.CommandType">
            <summary>
            Gets or sets the type of the command - assembly fully qualified name
            </summary>
        </member>
        <member name="P:Bifrost.Commands.PersistentCommandContext.SerializedCommand">
            <summary>
            Gets or sets the serialized version of the actual command
            </summary>
        </member>
        <member name="P:Bifrost.Commands.PersistentCommandContext.Origin">
            <summary>
            Gets or sets the origin of the command
            </summary>
        </member>
        <member name="P:Bifrost.Commands.PersistentCommandContext.CausedBy">
            <summary>
            Gets or sets the identity of the user or system that caused the command
            </summary>
        </member>
        <member name="T:Bifrost.Execution.ContainerServiceLocator">
            <summary>
            Represents a <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> that works with the generic <see cref="T:Bifrost.Execution.IContainer"/>
            </summary>
        </member>
        <member name="M:Bifrost.Execution.ContainerServiceLocator.#ctor(Bifrost.Execution.IContainer)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Execution.ContainerServiceLocator"/>
            </summary>
            <param name="container"><see cref="T:Bifrost.Execution.IContainer"/> to use</param>
        </member>
        <member name="T:Bifrost.Events.EventSourceExtensions">
            <summary>
            Extensions for <see cref="T:Bifrost.Events.EventSource"/>
            </summary>
        </member>
        <member name="M:Bifrost.Events.EventSourceExtensions.GetHandleMethod(Bifrost.Events.EventSource,Bifrost.Events.IEvent)">
            <summary>
            Get handle method from an <see cref="T:Bifrost.Events.EventSource"/> for a specific <see cref="T:Bifrost.Events.IEvent"/>, if any
            </summary>
            <param name="eventSource"><see cref="T:Bifrost.Events.EventSource"/> to get method from</param>
            <param name="event"><see cref="T:Bifrost.Events.IEvent"/> to get method for</param>
            <returns><see cref="T:System.Reflection.MethodInfo"/> containing information about the handle method, null if none exists</returns>
        </member>
        <member name="M:Bifrost.Events.EventSourceExtensions.IsStateless(Bifrost.Events.EventSource)">
            <summary>
            Indicates whether the Event Source maintains state and requires to handles events to restore that state
            </summary>
            <param name="eventSource"><see cref="T:Bifrost.Events.EventSource"/> to test for state</param>
            <returns>true if the Event Source does not maintain state</returns>
        </member>
        <member name="T:Bifrost.Configuration.ICommandsConfiguration">
            <summary>
            Defines configuration for commands
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.ConfigurationExtensions">
            <summary>
            Configuration extension for <see cref="T:Bifrost.Configuration.IConfigure"/> configuration for configuring Bifrost for 
            a <see cref="T:Bifrost.Configuration.IConfigurationSource"/> using a <see cref="T:Bifrost.Configuration.ConfigSection.IConfigurationManager"/> - typically
            a App.config/Web.config section
            </summary>
            <remarks>
            This is part of the fluent interface for configuring Bifrost
            </remarks>
            <summary>
            Provides Configuration extensions
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.ConfigurationExtensions.UsingConfigConfigurationSource(Bifrost.Configuration.IConfigure)">
            <summary>
            Using the Config configuration source
            </summary>
            <param name="configure"><see cref="T:Bifrost.Configuration.IConfigure"/> instance to configure for</param>
            <returns><see cref="T:Bifrost.Configuration.IConfigure"/> chain</returns>
        </member>
        <member name="M:Bifrost.Configuration.ConfigurationExtensions.SpecificApplication(Bifrost.Configuration.Configure,Bifrost.Execution.IApplication)">
            <summary>
            Sets a specific application for Bifrost
            </summary>
            <param name="configuration"><see cref="T:Bifrost.Configuration.Configure"/> instance to configure</param>
            <param name="application"><see cref="T:Bifrost.Execution.IApplication"/> instance to set</param>
            <returns>Chained <see cref="T:Bifrost.Configuration.Configure"/> instance</returns>
        </member>
        <member name="T:Bifrost.Serialization.ISerializer">
            <summary>
            Defines a serializer
            </summary>
        </member>
        <member name="M:Bifrost.Serialization.ISerializer.FromJson``1(System.String,Bifrost.Serialization.SerializationOptions)">
            <summary>
            Deserialize Json to a specific type from a <see cref="T:System.String"/>
            </summary>
            <typeparam name="T">Type to deserialize to</typeparam>
            <param name="json"><see cref="T:System.String"/> containing the Json</param>
            <param name="options">Options for the serializer</param>
            <returns>An deserialized</returns>
        </member>
        <member name="M:Bifrost.Serialization.ISerializer.FromJson(System.Type,System.String,Bifrost.Serialization.SerializationOptions)">
            <summary>
            Deserialize Json to a specific type from a <see cref="T:System.String"/>
            </summary>
            <param name="type">Type to deserialize to</param>
            <param name="json"><see cref="T:System.String"/> containing the Json</param>
            <param name="options">Options for the serializer</param>
            <returns>A deserialized instance</returns>
        </member>
        <member name="M:Bifrost.Serialization.ISerializer.FromJson(System.Object,System.String,Bifrost.Serialization.SerializationOptions)">
            <summary>
            Deserialize Json into a specific instance
            </summary>
            <param name="instance">Instance to deserialize into</param>
            <param name="json"><see cref="T:System.String"/> containing the Json</param>
            <param name="options">Options for the serializer</param>
        </member>
        <member name="M:Bifrost.Serialization.ISerializer.ToJson(System.Object,Bifrost.Serialization.SerializationOptions)">
            <summary>
            Serialize an object to Json as a string
            </summary>
            <param name="instance">Instance to serialize</param>
            <param name="options">Options for the serializer</param>
            <returns><see cref="T:System.String"/> containing the serialized instance</returns>
        </member>
        <member name="M:Bifrost.Serialization.ISerializer.GetKeyValuesFromJson(System.String)">
            <summary>
            Deserialize Json into a key/value dictionary
            </summary>
            <param name="json">Json to deserialize</param>
            <returns>A dictionary holding all properties and values in the Json</returns>
        </member>
        <member name="T:Bifrost.Execution.AssemblyComparer">
            <summary>
            Represents a comparer for comparing assemblies, typically used in Distinct() 
            </summary>
        </member>
        <member name="T:Bifrost.Execution.ApplicationManager">
            <summary>
            Represents a <see cref="T:Bifrost.Execution.IApplicationManager"/>
            </summary>
        </member>
        <member name="T:Bifrost.Execution.IApplicationManager">
            <summary>
            Defines a manager for managing an <see cref="T:Bifrost.Execution.IApplication"/>
            </summary>
            <remarks>
            There can only be one application in a process / app-domain
            </remarks>
        </member>
        <member name="M:Bifrost.Execution.IApplicationManager.Get">
            <summary>
            Get the current application
            </summary>
            <returns>The instance of an application</returns>
            <exception cref="T:Bifrost.Execution.MultipleApplicationsFoundException"/>
        </member>
        <member name="M:Bifrost.Execution.IApplicationManager.Set(Bifrost.Execution.IApplication)">
            <summary>
            Set the current application
            </summary>
            <param name="application">The instance of the application</param>
        </member>
        <member name="M:Bifrost.Execution.ApplicationManager.#ctor(Bifrost.Execution.ITypeDiscoverer,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Execution.ApplicationManager"/>
            </summary>
            <param name="typeDiscoverer"><see cref="T:Bifrost.Execution.ITypeDiscoverer"/> to use for discovering an application</param>
            <param name="serviceLocator"><see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> to use for instantiating an application</param>
        </member>
        <member name="T:Bifrost.Execution.SingletonAttribute">
            <summary>
            Indicates that a class is Singleton and should be treated as such
            for any factory creating an instance of a class marked with this
            </summary>
        </member>
        <member name="T:Bifrost.Domain.MissingAggregatedRootException">
            <summary>
            The exception that is thrown when an AggregatedRoot is missing
            </summary>
        </member>
        <member name="T:Bifrost.Events.InvalidMigrationTypeException">
            <summary>
            Represents an exceptional situation where an <see cref="T:Bifrost.Events.IEvent">Event</see> in an <see cref="T:Bifrost.Events.EventMigrationHierarchy">EventMigrationHierarchy</see>
            has does not migrate from the previous event in the migration hierarchy.
            </summary>
        </member>
        <member name="M:Bifrost.Events.InvalidMigrationTypeException.#ctor">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.InvalidMigrationTypeException">InvalidMigrationTypeException</see>
            </summary>
        </member>
        <member name="M:Bifrost.Events.InvalidMigrationTypeException.#ctor(System.String)">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.InvalidMigrationTypeException">InvalidMigrationTypeException</see>
            </summary>
            <param name="message">Error Message</param>
        </member>
        <member name="M:Bifrost.Events.InvalidMigrationTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.InvalidMigrationTypeException">InvalidMigrationTypeException</see>
            </summary>
            <param name="message">Error Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Bifrost.Events.InvalidMigrationTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.InvalidMigrationTypeException">InvalidMigrationTypeException</see> for serialization
            </summary>
            <param name="serializationInfo">Serialization Info</param>
            <param name="streamingContext">Streaming Context</param>
        </member>
        <member name="T:Bifrost.Validation.ICommandValidationService">
            <summary>
            Validates that a command is valid and conforms to simple business rules
            </summary>
        </member>
        <member name="M:Bifrost.Validation.ICommandValidationService.Validate(Bifrost.Commands.ICommand)">
            <summary>
            Validate the command
            </summary>
            <param name="command">Instance to be validated</param>
            <returns>A collection of ValidationResults that indicate any invalid properties / rules</returns>
        </member>
        <member name="T:Bifrost.Sagas.SagaNotInChapterException">
            <summary>
            The exception that is thrown when a <see cref="T:Bifrost.Sagas.ISaga"/> is not in a <see cref="T:Bifrost.Sagas.IChapter"/>
            </summary>
        </member>
        <member name="T:Bifrost.Execution.DefaultConvention">
            <summary>
            Represents a <see cref="T:Bifrost.Execution.IBindingConvention">IBindingConvention</see>
            that will apply default conventions
            </summary>
            <remarks>
            Any interface being resolved and is prefixed with I and have an implementation
            with the same name in the same namespace but without the prefix I, will automatically
            be resolved with this convention.
            </remarks>
        </member>
        <member name="M:Bifrost.Execution.DefaultConvention.#ctor">
            <summary>
            Initializes a new instance of <see creF="DefaultConvention">DefaultConvention</see>
            </summary>
        </member>
        <member name="T:Bifrost.Sagas.ISaga">
            <summary>
            Defines a saga
            </summary>
        </member>
        <member name="T:Bifrost.Events.IEventStore">
            <summary>
            Defines a repository that holds events generated
            </summary>
        </member>
        <member name="M:Bifrost.Events.IEventStore.Load(System.Type,System.Guid)">
            <summary>
            Load events for a specific aggregated root 
            </summary>
            <param name="aggregatedRootType">Type of aggregated root</param>
            <param name="aggregateId">Id of the aggregated root</param>
            <returns>All events for the aggregated root in an Event Stream</returns>
        </member>
        <member name="M:Bifrost.Events.IEventStore.Save(Bifrost.Events.UncommittedEventStream)">
            <summary>
            Save events for a specific aggregated root
            </summary>
            <param name="eventsToSave">Events to save as an Event Stream</param>
        </member>
        <member name="M:Bifrost.Events.IEventStore.GetLastCommittedVersion(System.Type,System.Guid)">
            <summary>
            Returns the last committed <see cref="T:Bifrost.Events.EventSourceVersion">Event Source Version</see> for the aggregate root
            </summary>
            <param name="aggregatedRootType">Type of the aggregrate root</param>
            <param name="aggregateId">Id of the aggregate root</param>
            <returns></returns>
        </member>
        <member name="M:Bifrost.Sagas.ISaga.SetCurrentChapter(Bifrost.Sagas.IChapter)">
            <summary>
            Set the current chapter
            </summary>
            <param name="chapter"><see cref="T:Bifrost.Sagas.IChapter"/> to set as current</param>
        </member>
        <member name="M:Bifrost.Sagas.ISaga.SetCurrentChapter``1">
            <summary>
            Set the current chapter
            </summary>
            <typeparam name="T"><see cref="T:Bifrost.Sagas.IChapter"/> to set as current</typeparam>
        </member>
        <member name="M:Bifrost.Sagas.ISaga.AddChapter(Bifrost.Sagas.IChapter)">
            <summary>
            Add a chapter to the saga
            </summary>
            <param name="chapter"><see cref="T:Bifrost.Sagas.IChapter"/> to add</param>
        </member>
        <member name="M:Bifrost.Sagas.ISaga.Contains``1">
            <summary>
            Check if the saga contains a chapter based on the type of the chapter
            </summary>
            <typeparam name="T">Type of <see cref="T:Bifrost.Sagas.IChapter"/> to check if saga contains</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bifrost.Sagas.ISaga.Contains(System.Type)">
            <summary>
            Check if the saga contains a chapter based on the type of the chapter
            </summary>
            <param name="type">Chapter type</param>
            <returns></returns>
        </member>
        <member name="M:Bifrost.Sagas.ISaga.Get``1">
            <summary>
            Get a specific chapter by type
            </summary>
            <typeparam name="T">Type of <see cref="T:Bifrost.Sagas.IChapter"/> to get</typeparam>
            <returns>Instance of chapter</returns>
            <exception cref="T:Bifrost.Sagas.ChapterDoesNotExistException">Thrown if chapter not in saga</exception>
        </member>
        <member name="M:Bifrost.Sagas.ISaga.Begin">
            <summary>
            Begins the Saga
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.ISaga.Continue">
            <summary>
            Continues the Saga
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.ISaga.Conclude">
            <summary>
            Concludes the Saga
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.ISaga.OnBegin">
            <summary>
            Method that is executed when the Saga is beginning.
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.ISaga.OnContinue">
            <summary>
            Method that is executed when the Saga is continuing.
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.ISaga.OnConclude">
            <summary>
            Method that is executed when the Saga is concludiung.
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.ISaga.GetUncommittedEvents">
            <summary>
            Get uncommitted events from the <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bifrost.Sagas.ISaga.SetUncommittedEvents(System.Collections.Generic.IEnumerable{Bifrost.Events.IEvent})">
            <summary>
            Set any uncommitted into the <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
            <param name="events"></param>
        </member>
        <member name="M:Bifrost.Sagas.ISaga.SaveUncommittedEventsToEventStore(Bifrost.Events.IEventStore)">
            <summary>
            Save any uncommitted events to a given <see cref="T:Bifrost.Events.IEventStore"/>
            </summary>
            <param name="eventStore"><see cref="T:Bifrost.Events.IEventStore"/> to save the events to</param>
        </member>
        <member name="P:Bifrost.Sagas.ISaga.Id">
            <summary>
            Gets or sets the unique identifier of a saga
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.ISaga.Partition">
            <summary>
            Gets or sets what partition the saga belongs to
            </summary>
            <remarks>
            Partitions are used to group sagas into logical partitions
            </remarks>
        </member>
        <member name="P:Bifrost.Sagas.ISaga.Key">
            <summary>
            Gets or sets the unique key within a partition for a saga
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.ISaga.Chapters">
            <summary>
            Gets the chapters in the saga
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.ISaga.CurrentChapter">
            <summary>
            Gets the current chapter in the saga
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.ISaga.ChapterProperties">
            <summary>
            Gets an array of PropertyInfo objects that reflect any Chapter instances that are available
            as properties on the Saga
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.ISaga.CurrentState">
            <summary>
            Gets and sets the SagaState.  Only to be used directly by serialization.
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.ISaga.IsNew">
            <summary>
            Indicates whether the saga is continuing
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bifrost.Sagas.ISaga.IsBegun">
            <summary>
            Indicates whether the saga has Begun
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bifrost.Sagas.ISaga.IsContinuing">
            <summary>
            Indicates whether the saga is continuing
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bifrost.Sagas.ISaga.IsConcluded">
            <summary>
            Indicates whether the saga is concluded
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bifrost.Events.ProcessMethodInvoker">
            <summary>
            Represents an implementation of <see cref="T:Bifrost.Events.IProcessMethodInvoker"/>
            </summary>
        </member>
        <member name="F:Bifrost.Events.ProcessMethodInvoker.ProcessMethodName">
            <summary>
            Name of method that any event subscriber needs to be called in order to be recognized by the convention
            </summary>
        </member>
        <member name="T:Bifrost.Commands.ExpressionNotMethodCallException">
            <summary>
            The exception that is thrown when an expression is not a method call
            </summary>
        </member>
        <member name="M:Bifrost.Commands.ExpressionNotMethodCallException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Commands.ExpressionNotMethodCallException"/>
            </summary>
            <param name="message">Message with details for the exception</param>
        </member>
        <member name="T:Bifrost.Extensions.ExpressionExtensions">
            <summary>
            Provides methods for working with expressions
            </summary>
        </member>
        <member name="M:Bifrost.Extensions.ExpressionExtensions.GetMethodInfo(System.Linq.Expressions.Expression)">
            <summary>
            Get <see cref="T:System.Reflection.MethodInfo">MethodInfo</see> from an <see cref="T:System.Linq.Expressions.Expression">expression</see> - if any
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression">Expression</see> to get MethodInfo from</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo">MethodInfo</see> found, null if did not find one</returns>
        </member>
        <member name="M:Bifrost.Extensions.ExpressionExtensions.GetMemberExpression(System.Linq.Expressions.Expression)">
            <summary>
            Get <see cref="T:System.Linq.Expressions.MemberExpression">MemberExpression</see> from an <see cref="T:System.Linq.Expressions.Expression">expression</see> - if any
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression">Expression</see> to get <see cref="T:System.Linq.Expressions.MemberExpression">MemberExpression</see> from</param>
            <returns><see cref="T:System.Linq.Expressions.MemberExpression">MemberExpression</see> instance, null if there is none</returns>
        </member>
        <member name="M:Bifrost.Extensions.ExpressionExtensions.GetFieldInfo(System.Linq.Expressions.Expression)">
            <summary>
            Get <see cref="T:System.Reflection.FieldInfo">FieldInfo</see> from an <see cref="T:System.Linq.Expressions.Expression">Expression</see> - if any
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression">Expression</see> to get <see cref="T:System.Reflection.FieldInfo">FieldInfo</see> from</param>
            <returns><see cref="T:System.Reflection.FieldInfo">FieldInfo</see> instance, null if there is none</returns>
        </member>
        <member name="M:Bifrost.Extensions.ExpressionExtensions.GetPropertyInfo(System.Linq.Expressions.Expression)">
            <summary>
            Get <see cref="T:System.Reflection.PropertyInfo">PropertyInfo</see> from an <see cref="T:System.Linq.Expressions.Expression">Expression</see> - if any
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression">Expression</see> to get <see cref="T:System.Reflection.PropertyInfo">PropertyInfo</see> from</param>
            <returns><see cref="T:System.Reflection.PropertyInfo">PropertyInfo</see> instance, null if there is none</returns>
        </member>
        <member name="M:Bifrost.Extensions.ExpressionExtensions.GetInstance(System.Linq.Expressions.Expression)">
            <summary>
            Get an instance reference from an <see cref="T:System.Linq.Expressions.Expression">Expression</see> - if any
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression">Expression</see> to get an instance from</param>
            <returns>The instance, null if there is none</returns>
        </member>
        <member name="M:Bifrost.Extensions.ExpressionExtensions.GetInstance``1(System.Linq.Expressions.Expression)">
            <summary>
            Get an instance reference from an <see cref="T:System.Linq.Expressions.Expression">Expression</see>, with a specific type - if any
            </summary>
            <typeparam name="T">Type of the instance</typeparam>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression">Expression</see> to get an instance from</param>
            <returns>The instance, null if there is none</returns>
        </member>
        <member name="T:Bifrost.Execution.TypeImporter">
            <summary>
            Represents a <see cref="T:Bifrost.Execution.ITypeImporter">ITypeImporter</see>
            </summary>
        </member>
        <member name="T:Bifrost.Execution.ITypeImporter">
            <summary>
            Defines a container for importing types.
            </summary>
        </member>
        <member name="M:Bifrost.Execution.ITypeImporter.ImportMany``1">
            <summary>
            Import many instances of type
            </summary>
            <typeparam name="T">Basetype to import - any inheritors will be found and created</typeparam>
            <returns>An array of instances that implements or inherits from the given base type</returns>
        </member>
        <member name="M:Bifrost.Execution.ITypeImporter.Import``1">
            <summary>
            Import a single instance of a type
            </summary>
            <typeparam name="T">Basetype to import</typeparam>
            <returns>An instance of a type that implements the given base type</returns>
        </member>
        <member name="M:Bifrost.Execution.TypeImporter.#ctor(Bifrost.Execution.IContainer,Bifrost.Execution.ITypeDiscoverer)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Execution.TypeImporter">TypeImporter</see>
            </summary>
            <param name="container"><see cref="T:Bifrost.Execution.IContainer"/> that used for creating types</param>
            <param name="typeDiscoverer">A <see cref="T:Bifrost.Execution.ITypeDiscoverer">ITypeDiscoverer</see> used for discovering types</param>
        </member>
        <member name="T:Bifrost.Sagas.ChapterTransitionNotAllowedException">
            <summary>
            The exception that is thrown if a transition between two chapters are not allowed
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.ChapterTransitionNotAllowedException.#ctor(System.Type,System.Type)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Sagas.ChapterTransitionNotAllowedException"/>
            </summary>
            <param name="from">From <see cref="T:Bifrost.Sagas.IChapter"/></param>
            <param name="to">To <see cref="T:Bifrost.Sagas.IChapter"/></param>
        </member>
        <member name="T:Bifrost.Configuration.ConfigSection.ConfigConfigurationSource">
            <summary>
            Represents an implementation of <see cref="T:Bifrost.Configuration.IConfigurationSource"/> that works with App.config/web.config
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.IConfigurationSource">
            <summary>
            Defines a source for configuration
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.IConfigurationSource.Initialize(Bifrost.Configuration.Configure)">
            <summary>
            Gets called when it should initialize itself
            </summary>
            <param name="configure"><see cref="T:Bifrost.Configuration.Configure"/> instance to use for configuration</param>
        </member>
        <member name="M:Bifrost.Configuration.ConfigSection.ConfigConfigurationSource.#ctor(Bifrost.Configuration.ConfigSection.IConfigurationManager)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Configuration.ConfigSection.ConfigConfigurationSource"/>
            </summary>
            <param name="configurationManager"><see cref="T:Bifrost.Configuration.ConfigSection.IConfigurationManager"/> that is used to get the config section from</param>
        </member>
        <member name="T:Bifrost.Sagas.ICanTransitionTo`1">
            <summary>
            Defines a marker interface to allow transitions between chapters
            </summary>
            <typeparam name="T">Type of <see cref="T:Bifrost.Sagas.IChapter"/> that can be transitioned to</typeparam>
        </member>
        <member name="T:Bifrost.Globalization.Localizer">
            <summary>
            Represents a <see cref="T:Bifrost.Globalization.ILocalizer"/>
            </summary>
        </member>
        <member name="T:Bifrost.Globalization.ILocalizer">
            <summary>
            Defines a localizer for entering in and out of a <see cref="T:Bifrost.Globalization.LocalizationScope"/>
            </summary>
        </member>
        <member name="M:Bifrost.Globalization.ILocalizer.BeginScope">
            <summary>
            Begin a <see cref="T:Bifrost.Globalization.LocalizationScope"/>
            </summary>
            <returns><see cref="T:Bifrost.Globalization.LocalizationScope"/></returns>
        </member>
        <member name="M:Bifrost.Globalization.ILocalizer.EndScope(Bifrost.Globalization.LocalizationScope)">
            <summary>
            End a <see cref="T:Bifrost.Globalization.LocalizationScope"/>
            </summary>
            <param name="scope"><see cref="T:Bifrost.Globalization.LocalizationScope"/> to end</param>
        </member>
        <member name="T:Bifrost.Globalization.LocalizationScope">
            <summary>
            Represents a scope for localization, when exiting the scope, cultures will be reset back to the cultures given at construction.
            The scopes purpose is to enable one to change cultures within a given scope but have it gracefully reset back to the previous
            or a given culture when disposed
            </summary>
        </member>
        <member name="M:Bifrost.Globalization.LocalizationScope.#ctor(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Globalization.LocalizationScope"/>
            </summary>
            <param name="culture"><see cref="T:System.Globalization.CultureInfo"/> to initialize the scope with</param>
            <param name="uiCulture"><see cref="T:System.Globalization.CultureInfo"/> to initialize the scope as the UI culture with</param>
        </member>
        <member name="M:Bifrost.Globalization.LocalizationScope.FromCurrentThread">
            <summary>
            Get current <see cref="T:Bifrost.Globalization.LocalizationScope"/> from the current thread
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bifrost.Globalization.LocalizationScope.Dispose">
            <summary>
            Dispose the scope, resetting the culture back to the cultures given at construction
            </summary>
        </member>
        <member name="P:Bifrost.Globalization.LocalizationScope.Culture">
            <summary>
            Gets the culture for the <see cref="T:Bifrost.Globalization.LocalizationScope"/>
            </summary>
        </member>
        <member name="P:Bifrost.Globalization.LocalizationScope.UICulture">
            <summary>
            Gets the UI culture for the <see cref="T:Bifrost.Globalization.LocalizationScope"/>
            </summary>
        </member>
        <member name="T:Bifrost.Sagas.Exceptions.InvalidSagaStateTransitionException">
            <summary>
            Exception indicating that the transition between two <see cref="T:Bifrost.Sagas.SagaState">SagaStates</see> is invalid.
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.Exceptions.InvalidSagaStateTransitionException.#ctor">
            <summary>
            Initializes an <see cref="T:Bifrost.Sagas.Exceptions.InvalidSagaStateTransitionException">InvalidSagaStateTransitionException</see>
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.Exceptions.InvalidSagaStateTransitionException.#ctor(System.String)">
            <summary>
            Initializes an <see cref="T:Bifrost.Sagas.Exceptions.InvalidSagaStateTransitionException">InvalidSagaStateTransitionException</see>
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:Bifrost.Sagas.Exceptions.InvalidSagaStateTransitionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an <see cref="T:Bifrost.Sagas.Exceptions.InvalidSagaStateTransitionException">InvalidSagaStateTransitionException</see>
            </summary>
            <param name="message">Error message</param>
            <param name="inner">Inner Exception</param>
        </member>
        <member name="M:Bifrost.Sagas.Exceptions.InvalidSagaStateTransitionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an <see cref="T:Bifrost.Sagas.Exceptions.InvalidSagaStateTransitionException">InvalidSagaStateTransitionException</see> for serialization
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Streaming Context</param>
        </member>
        <member name="T:Bifrost.Execution.ExecutionContext">
            <summary>
            Represents a <see cref="T:Bifrost.Execution.IExecutionContext"/>
            </summary>
        </member>
        <member name="T:Bifrost.Execution.IExecutionContext">
            <summary>
            Defines the execution context in which things are within
            For instance, any commands coming into the system will be in the context of an execution context
            </summary>
        </member>
        <member name="P:Bifrost.Execution.IExecutionContext.Identity">
            <summary>
            Gets or sets the identity for the execution context
            </summary>
        </member>
        <member name="P:Bifrost.Execution.IExecutionContext.System">
            <summary>
            Gets or sets the string identifying the currently executing system
            </summary>
        </member>
        <member name="T:Bifrost.Events.IEventStoreChangeNotifier">
            <summary>
            Defines a notifier for notifying when changes occur on an <see cref="T:Bifrost.Events.IEventStore"/>
            </summary>
        </member>
        <member name="M:Bifrost.Events.IEventStoreChangeNotifier.Notify(Bifrost.Events.IEventStore)">
            <summary>
            Notify changes for a <see cref="T:Bifrost.Events.IEventStore"/>
            </summary>
            <param name="eventStore"><see cref="T:Bifrost.Events.IEventStore"/> to notify for</param>
        </member>
        <member name="T:Bifrost.Domain.IAggregatedRootFactory">
            <summary>
            Defines the basic functionality for creating aggregated roots
            </summary>
        </member>
        <member name="M:Bifrost.Domain.IAggregatedRootFactory.Create(System.Guid)">
            <summary>
            Create an instance of the aggregated root
            </summary>
            <param name="id">The id that represents the aggregated root</param>
            <returns>An instance of the aggregated root</returns>
        </member>
        <member name="T:Bifrost.Domain.IAggregatedRootFactory`1">
            <summary>
            Defines the basic functionality for creating aggregated roots
            </summary>
            <typeparam name="T">Type of aggregated roots</typeparam>
        </member>
        <member name="M:Bifrost.Domain.IAggregatedRootFactory`1.Create(System.Guid)">
            <summary>
            Create an instance of the aggregated root
            </summary>
            <param name="id">The id that represents the aggregated root</param>
            <returns>An instance of the aggregated root</returns>
        </member>
        <member name="T:Bifrost.Events.EventSourceVersion">
            <summary>
            Represents the versioning for an <see cref="T:Bifrost.Events.EventSource"/>
            </summary>
        </member>
        <member name="F:Bifrost.Events.EventSourceVersion.Zero">
            <summary>
            Zero/null version
            </summary>
        </member>
        <member name="M:Bifrost.Events.EventSourceVersion.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Events.EventSourceVersion"/>
            </summary>
            <param name="commit">Commit part of the version (major)</param>
            <param name="sequence">Sequence part of the version, within the commit (minor) </param>
        </member>
        <member name="M:Bifrost.Events.EventSourceVersion.NextCommit">
            <summary>
            Increase the commit number and return a new version
            </summary>
            <returns><see cref="T:Bifrost.Events.EventSourceVersion"/> with the new version</returns>
        </member>
        <member name="M:Bifrost.Events.EventSourceVersion.NextSequence">
            <summary>
            Increase the sequence number and return a new version
            </summary>
            <returns><see cref="T:Bifrost.Events.EventSourceVersion"/> with the new version</returns>
        </member>
        <member name="M:Bifrost.Events.EventSourceVersion.PreviousCommit">
            <summary>
            Decrease the commit number and return a new version
            </summary>
            <returns><see cref="T:Bifrost.Events.EventSourceVersion"/> with the new version</returns>
        </member>
        <member name="M:Bifrost.Events.EventSourceVersion.CompareTo(Bifrost.Events.EventSourceVersion)">
            <summary>
            Compare this version with another version
            </summary>
            <param name="other">The other version to compare to</param>
            <returns>
            Less than zero - this instance is less than the other version
            Zero - this instance is equal to the other version
            Greater than zero - this instance is greater than the other version
            </returns>
        </member>
        <member name="M:Bifrost.Events.EventSourceVersion.Combine">
            <summary>
            Combines the Major / Minor number of Commit and Sequence into a single floating point number
            where the Commit is before the decimal place and Sequence is after.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bifrost.Events.EventSourceVersion.Commit">
            <summary>
            Gets the commit number of the version
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventSourceVersion.Sequence">
            <summary>
            Gets the sequence number of the version
            </summary>
        </member>
        <member name="T:Bifrost.Events.EventMigrationHierarchyManager">
            <summary>
            Represents a <see cref="T:Bifrost.Events.IEventMigrationHierarchyManager">IEventMigrationHierarchyManager</see>
            </summary>
            <remarks>
            The manager will automatically build an <see cref="T:Bifrost.Events.EventMigrationHierarchy">EventMigrationHierarchy</see> for all events and
            allow clients to query for the current migration level for a specific logical event or the concrete type of a particular link
            in the migration chain for a logical event.
            </remarks>
        </member>
        <member name="M:Bifrost.Events.EventMigrationHierarchyManager.#ctor(Bifrost.Events.IEventMigrationHierarchyDiscoverer)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Events.EventMigrationHierarchyManager">EventMigrationHierarchyManager</see>
            </summary>
            <param name="eventMigrationHierarchyDiscoverer">IEventMigrationHierarchyDiscoverer</param>
        </member>
        <member name="T:Bifrost.Events.EventMigrationHierarchy">
            <summary>
            Represents a migration hierarchy for a logical event, containing the concrete type for each step in the chain.
            </summary>
        </member>
        <member name="M:Bifrost.Events.EventMigrationHierarchy.#ctor(System.Type)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Events.EventMigrationHierarchy"/>
            </summary>
            <param name="logicalEvent">Logical event that the hierarchy relates to.</param>
        </member>
        <member name="M:Bifrost.Events.EventMigrationHierarchy.AddMigrationLevel(System.Type)">
            <summary>
            Adds a new concrete type as the next level in the migration hierarchy
            </summary>
            <param name="type">Concrete type of the logical event</param>
        </member>
        <member name="M:Bifrost.Events.EventMigrationHierarchy.GetConcreteTypeForLevel(System.Int32)">
            <summary>
            Gets the concrete type of the logical event at the specified migration level
            </summary>
            <param name="level">The migration level</param>
            <returns>Concrete type of the logical event at the specified migration level</returns>
        </member>
        <member name="M:Bifrost.Events.EventMigrationHierarchy.GetLevelForConcreteType(System.Type)">
            <summary>
            Gets the level which the concrete type occupies in the migration hierarchy
            </summary>
            <param name="type">Concrete type of the logical event</param>
            <returns>The migration level</returns>
        </member>
        <member name="P:Bifrost.Events.EventMigrationHierarchy.LogicalEvent">
            <summary>
            Gets the logical event type
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventMigrationHierarchy.MigrationLevel">
            <summary>
            Gets the migration level of the hierarchy
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventMigrationHierarchy.MigratedTypes">
            <summary>
            Gets the types in the migration hierarchy
            </summary>
        </member>
        <member name="T:Bifrost.Validation.NullCommandInputValidator">
            <summary>
            Represent a null or non-existant validator.
            </summary>
            <remarks>
            Always returns an empty validation result collection.
            </remarks>
        </member>
        <member name="T:Bifrost.Execution.IContainer">
            <summary>
            Defines a container for resolving types
            </summary>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Get``1">
            <summary>
            Get an instance of a specific type
            </summary>
            <typeparam name="T">Type to get instance of</typeparam>
            <returns>Instance of the type</returns>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Get``1(System.Boolean)">
            <summary>
            Get an instance of a specific type
            </summary>
            <typeparam name="T">Type to get instance of</typeparam>
            <param name="optional">If the binding is optional, return null and not throw an exception</param>
            <returns>Instance of the type</returns>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Get(System.Type)">
            <summary>
            Get an instance of a specific type
            </summary>
            <param name="type">Type to get instance of</param>
            <returns>Instance of the type</returns>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Get(System.Type,System.Boolean)">
            <summary>
            Get an instance of a specific type
            </summary>
            <param name="type">Type to get instance of</param>
            <param name="optional">If the binding is optional, return null and not throw an exception</param>
            <returns>Instance of the type</returns>
        </member>
        <member name="M:Bifrost.Execution.IContainer.GetAll``1">
            <summary>
            Get all instances of a specific type
            </summary>
            <typeparam name="T">Type to get instances of</typeparam>
            <returns>Instances of the type</returns>
        </member>
        <member name="M:Bifrost.Execution.IContainer.HasBindingFor(System.Type)">
            <summary>
            Gets wether or not a specific service has a binding 
            </summary>
            <param name="type">Type of service to check</param>
            <returns>True if service has binding, false if not</returns>
        </member>
        <member name="M:Bifrost.Execution.IContainer.HasBindingFor``1">
            <summary>
            Gets wether or not a specific service has a binding 
            </summary>
            <typeparam name="T">Type of service to check</typeparam>
            <returns>True if service has binding, false if not</returns>
        </member>
        <member name="M:Bifrost.Execution.IContainer.GetAll(System.Type)">
            <summary>
            Get all instances of a specific type
            </summary>
            <param name="type">Type to get instances for</param>
            <returns>Instances of the type</returns>
        </member>
        <member name="M:Bifrost.Execution.IContainer.GetBoundServices">
            <summary>
            Get all services that have been bound
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all bound services</returns>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Bind(System.Type,System.Func{System.Type})">
            <summary>
            Bind a service type to a callback that can resolve it
            </summary>
            <param name="service">Service to bind</param>
            <param name="resolveCallback">Callback that gets called to resolve it</param>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Bind``1(System.Func{System.Type})">
            <summary>
            Bind a service type to a callback that can resolve it
            </summary>
            <typeparam name="T">Service to bind</typeparam>
            <param name="resolveCallback">Callback that gets called to resolve it</param>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Bind(System.Type,System.Func{System.Type},Bifrost.Execution.BindingLifecycle)">
            <summary>
            Bind a service type to a callback that can resolve it with given lifecycle
            </summary>
            <param name="service">Service to bind</param>
            <param name="resolveCallback">Callback that gets called to resolve it</param>
            <param name="lifecycle">Lifecycle of the service</param>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Bind``1(System.Func{System.Type},Bifrost.Execution.BindingLifecycle)">
            <summary>
            Bind a service type to a callback that can resolve it with given lifecycle
            </summary>
            <typeparam name="T">Service to bind</typeparam>
            <param name="resolveCallback">Callback that gets called to resolve it</param>
            <param name="lifecycle">Lifecycle of the service</param>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Bind``1(System.Type)">
            <summary>
            Bind a service to a specific type 
            </summary>
            <typeparam name="T">Service to bind</typeparam>
            <param name="type">Target type to bind to</param>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Bind(System.Type,System.Type)">
            <summary>
            Bind a service to a specific type 
            </summary>
            <param name="service">Service to bind</param>
            <param name="type">Target type to bind to</param>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Bind``1(System.Type,Bifrost.Execution.BindingLifecycle)">
            <summary>
            Bind a service to a specific type with given lifecycle
            </summary>
            <typeparam name="T">Service to bind</typeparam>
            <param name="type">Target type to bind to</param>
            <param name="lifecycle">Lifecycle of the service</param>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Bind(System.Type,System.Type,Bifrost.Execution.BindingLifecycle)">
            <summary>
            Bind a service to a specific type with given lifecycle
            </summary>
            <param name="service">Service to bind</param>
            <param name="type">Target type to bind to</param>
            <param name="lifecycle">Lifecycle of the service</param>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Bind``1(``0)">
            <summary>
            Bind a service to a specific instance
            </summary>
            <typeparam name="T">Service to bind</typeparam>
            <param name="instance">Instance to bind to</param>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Bind(System.Type,System.Object)">
            <summary>
            Bind a service to a specific instance
            </summary>
            <param name="service">Service to bind</param>
            <param name="instance">Instance to bind to</param>
        </member>
        <member name="T:Bifrost.Sagas.ChapterTransition">
            <summary>
            Represents the result of a transition between <see cref="T:Bifrost.Sagas.IChapter">chapters</see> 
            </summary>
            <remarks>
            Since chapters work with commands, this result is inheriting from <see cref="T:Bifrost.Commands.CommandResult"/>
            </remarks>
        </member>
        <member name="T:Bifrost.Commands.CommandResult">
            <summary>
            Represents the result from the <see cref="T:Bifrost.Commands.ICommandCoordinator">CommandCoordinator</see>
            </summary>
        </member>
        <member name="M:Bifrost.Commands.CommandResult.MergeWith(Bifrost.Commands.CommandResult)">
            <summary>
            Merges this instance of a CommandResult with another
            </summary>
            <param name="commandResultToMerge">The <see cref="T:Bifrost.Commands.CommandResult"/> to merge with the current instance</param>
        </member>
        <member name="P:Bifrost.Commands.CommandResult.ValidationResults">
            <summary>
            Gets or sets the ValidationResults generated during handling of a command
            </summary>
        </member>
        <member name="P:Bifrost.Commands.CommandResult.Exception">
            <summary>
            Gets or sets the exception, if any, that occured during a handle
            </summary>
        </member>
        <member name="P:Bifrost.Commands.CommandResult.Success">
             <summary>
             Gets the success state of the result
            
             If there are invalid validationresult, this is false.
             If an exception occured, this is false.
             Otherwise, its true
             </summary>
        </member>
        <member name="P:Bifrost.Commands.CommandResult.Invalid">
             <summary>
             Gets the validation state of the result
            
             If there are any validationresults this returns false, true if not
             </summary>
        </member>
        <member name="P:Bifrost.Sagas.ChapterTransition.TransitionedTo">
            <summary>
            Gets or sets the <see cref="T:Bifrost.Sagas.IChapter"/> that was transitioned to, if succeeded
            </summary>
        </member>
        <member name="T:Bifrost.Extensions.TypeInfo`1">
            <summary>
            Represents an implementation of <see cref="T:Bifrost.Extensions.ITypeInfo"/>
            </summary>
            <typeparam name="T">Type it holds info for</typeparam>
        </member>
        <member name="T:Bifrost.Extensions.ITypeInfo">
            <summary>
            Defines information for types
            </summary>
        </member>
        <member name="P:Bifrost.Extensions.ITypeInfo.HasDefaultConstructor">
            <summary>
            Gets a boolean indicating wether or not the type has a default constructor that takes no arguments
            </summary>
        </member>
        <member name="F:Bifrost.Extensions.TypeInfo`1.Instance">
            <summary>
            Gets a singleton instance of the TypeInfo
            </summary>
        </member>
        <member name="T:Bifrost.Events.EventSubscriptionManager">
            <summary>
            Represents an implementation of <see cref="T:Bifrost.Events.IEventSubscriptionManager"/>
            </summary>
        </member>
        <member name="T:Bifrost.Events.IEventSubscriptionManager">
            <summary>
            Defines a manager for dealing with <see cref="T:Bifrost.Events.EventSubscription">EventSubscriptions</see>
            </summary>
        </member>
        <member name="M:Bifrost.Events.IEventSubscriptionManager.GetAllSubscriptions">
            <summary>
            Get all <see cref="T:Bifrost.Events.EventSubscription">EventSubscriptions</see>
            </summary>
            <returns>All available <see cref="T:Bifrost.Events.EventSubscription">EventSubscriptions</see></returns>
        </member>
        <member name="M:Bifrost.Events.IEventSubscriptionManager.GetAvailableSubscriptions">
            <summary>
            Get all available <see cref="T:Bifrost.Events.EventSubscription">EventSubscriptions</see>
            </summary>
            <returns>All available <see cref="T:Bifrost.Events.EventSubscription">EventSubscriptions</see></returns>
        </member>
        <member name="M:Bifrost.Events.IEventSubscriptionManager.Process(System.Collections.Generic.IEnumerable{Bifrost.Events.IEvent})">
            <summary>
            Process a set of <see cref="T:Bifrost.Events.IEvent">Events</see>
            </summary>
            <param name="events"><see cref="T:Bifrost.Events.IEvent">Events</see> to process</param>
        </member>
        <member name="M:Bifrost.Events.IEventSubscriptionManager.Process(Bifrost.Events.IEvent)">
            <summary>
            Process a single <see cref="T:Bifrost.Events.IEvent"/>
            </summary>
            <param name="event"><see cref="T:Bifrost.Events.IEvent"/> to process</param>
        </member>
        <member name="M:Bifrost.Events.EventSubscriptionManager.#ctor(Bifrost.Events.IEventSubscriptionRepository,Bifrost.Execution.ITypeDiscoverer,Bifrost.Execution.IContainer)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Events.EventSubscriptionManager"/>
            </summary>
            <param name="repository">A <see cref="T:Bifrost.Events.IEventSubscriptionRepository"/> that will be used to maintain subscriptions from a datasource</param>
            <param name="typeDiscoverer">A <see cref="T:Bifrost.Execution.ITypeDiscoverer"/> for discovering <see cref="T:Bifrost.Events.IEventSubscriber"/>s in current process</param>
            <param name="container">A <see cref="T:Bifrost.Execution.IContainer"/> for creating instances of objects/services</param>
        </member>
        <member name="T:Bifrost.Configuration.ConfigSection.IConfigurationManager">
            <summary>
            Defines a manager for getting configuration
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.ConfigSection.IConfigurationManager.GetSection(System.String)">
            <summary>
            Get a section inside a configuration by name
            </summary>
            <param name="sectionName">Name of section to get</param>
            <returns>An instance of the configuration</returns>
        </member>
        <member name="T:Bifrost.Execution.BindingLifecycle">
            <summary>
            Scope for activation
            </summary>
        </member>
        <member name="F:Bifrost.Execution.BindingLifecycle.None">
            <summary>
            Default - none
            </summary>
        </member>
        <member name="F:Bifrost.Execution.BindingLifecycle.Singleton">
            <summary>
            Scoped as a singleton within the Ninject kernel
            </summary>
        </member>
        <member name="F:Bifrost.Execution.BindingLifecycle.Request">
            <summary>
            Scoped as per request - tied into the current WebRequest
            </summary>
        </member>
        <member name="F:Bifrost.Execution.BindingLifecycle.Transient">
            <summary>
            Scoped to null
            </summary>
        </member>
        <member name="F:Bifrost.Execution.BindingLifecycle.Thread">
            <summary>
            Scoped to per thread 
            </summary>
        </member>
        <member name="T:Bifrost.Views.View`1">
            <summary>
            Represents a <see cref="T:Bifrost.Views.IView`1"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Bifrost.Views.IView`1">
            <summary>
            Defines a repository that can be queried against
            </summary>
            <typeparam name="T">Type that can be queried against</typeparam>
        </member>
        <member name="M:Bifrost.Views.IView`1.Get(System.Guid)">
            <summary>
            Gets a single instance based on Id
            </summary>
            <param name="id">Id of instance to get</param>
            <returns>The instance found - null if not found</returns>
        </member>
        <member name="P:Bifrost.Views.IView`1.Query">
            <summary>
            Gets a queryable that can be queried against
            </summary>
        </member>
        <member name="M:Bifrost.Views.View`1.#ctor(Bifrost.Entities.IEntityContext{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Views.View`1">QueryRepository</see>
            </summary>
            <param name="entityContext">An <see cref="T:Bifrost.Entities.IEntityContext`1">IEntityContext</see> to use for querying</param>
        </member>
        <member name="T:Bifrost.Commands.CommandCoordinator">
            <summary>
            Represents a <see cref="T:Bifrost.Commands.ICommandCoordinator">ICommandCoordinator</see>
            </summary>
        </member>
        <member name="T:Bifrost.Commands.ICommandCoordinator">
            <summary>
            Defines a coordinator for coordinating commands coming into the system
            </summary>
        </member>
        <member name="M:Bifrost.Commands.ICommandCoordinator.Handle(Bifrost.Sagas.ISaga,Bifrost.Commands.ICommand)">
            <summary>
            Handle a command in the context of a saga
            </summary>
            <param name="saga"><see cref="T:Bifrost.Sagas.ISaga"/> to handle in context of</param>
            <param name="command"><see cref="T:Bifrost.Commands.ICommand">command</see> to handle</param>
            <returns>
            Result from the handle.
            Within the result one can check if the handling was success or not
            </returns>
        </member>
        <member name="M:Bifrost.Commands.ICommandCoordinator.Handle(Bifrost.Commands.ICommand)">
            <summary>
            Handle a command
            </summary>
            <param name="command"><see cref="T:Bifrost.Commands.ICommand">command</see> to handle</param>
            <returns>
            Result from the handle.
            Within the result one can check if the handling was success or not
            </returns>
        </member>
        <member name="M:Bifrost.Commands.ICommandCoordinator.Handle``1(Bifrost.Sagas.ISaga,System.Guid,System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Handle a command by using a method as definition on the aggregated root 
            and using a dynamic command for wrapping it up in the context of a saga
            </summary>
            <typeparam name="T">Type of aggregated root</typeparam>
            <param name="saga"><see cref="T:Bifrost.Sagas.ISaga"/> to handle in context of</param>
            <param name="aggregatedRootId">Id of the <see cref="T:Bifrost.Domain.AggregatedRoot"/></param>
            <param name="method">Expression expressing the method on the aggregated root with the arguments it needs</param>
            <returns>
            Result from the handle.
            Within the result one can check if the handling was success or not
            </returns>
        </member>
        <member name="M:Bifrost.Commands.ICommandCoordinator.Handle``1(System.Guid,System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Handle a command by using a method as definition on the aggregated root 
            and using a dynamic command for wrapping it up
            </summary>
            <typeparam name="T">Type of aggregated root</typeparam>
            <param name="aggregatedRootId">Id of the <see cref="T:Bifrost.Domain.AggregatedRoot"/></param>
            <param name="method">Expression expressing the method on the aggregated root with the arguments it needs</param>
            <returns>
            Result from the handle.
            Within the result one can check if the handling was success or not
            </returns>
        </member>
        <member name="M:Bifrost.Commands.CommandCoordinator.#ctor(Bifrost.Commands.ICommandHandlerManager,Bifrost.Commands.ICommandContextManager,Bifrost.Validation.ICommandValidationService,Bifrost.Commands.IDynamicCommandFactory,Bifrost.Globalization.ILocalizer)">
            <summary>
            Initializes a new instance of the <see cref="T:Bifrost.Commands.CommandCoordinator">CommandCoordinator</see>
            </summary>
            <param name="commandHandlerManager">A <see cref="T:Bifrost.Commands.ICommandHandlerManager"/> for handling commands</param>
            <param name="commandContextManager">A <see cref="T:Bifrost.Commands.ICommandContextManager"/> for establishing a <see cref="T:Bifrost.Commands.CommandContext"/></param>
            <param name="commandValidationService">A <see cref="T:Bifrost.Validation.ICommandValidationService"/> for validating a <see cref="T:Bifrost.Commands.ICommand"/> before handling</param>
            <param name="dynamicCommandFactory">A <see cref="T:Bifrost.Commands.IDynamicCommandFactory"/> creating dynamic commands</param>
            <param name="localizer">A <see cref="T:Bifrost.Globalization.ILocalizer"/> to use for controlling localization of current thread when handling commands</param>
        </member>
        <member name="T:Bifrost.Events.EventStream">
            <summary>
            Represents a collection of events in the order that they were applied.
            </summary>
        </member>
        <member name="F:Bifrost.Events.EventStream.Events">
            <summary>
            Gets a list of all the events in the stream
            </summary>
        </member>
        <member name="M:Bifrost.Events.EventStream.#ctor(System.Guid)">
            <summary>
            Initializes a new <see cref="T:Bifrost.Events.EventStream">EventStream</see>
            </summary>
            <param name="eventSourceId">Id of the event source - typically an <see cref="T:Bifrost.Domain.AggregatedRoot">AggregatedRoot</see></param>
        </member>
        <member name="M:Bifrost.Events.EventStream.GetEnumerator">
            <summary>
            Get a generic enumerator to iterate over the events
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="P:Bifrost.Events.EventStream.EventSourceId">
            <summary>
            Gets the Id of the Event Source (Aggregate Root) that this Event Stream relates to.
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventStream.HasEvents">
            <summary>
            Indicates whether there are any events in the Stream.
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventStream.Count">
            <summary>
            The number of Events in the Stream.
            </summary>
        </member>
        <member name="T:Bifrost.Domain.IDynamicOriginator">
            <summary>
            Defines an origin, typically for aggregated roots when needing to create mementos and set them
            
            This interface represents the mementos dynamically
            </summary>
        </member>
        <member name="M:Bifrost.Domain.IDynamicOriginator.CreateMemento">
            <summary>
            Create a memento
            </summary>
            <returns>Dynamic representation of the memento</returns>
        </member>
        <member name="M:Bifrost.Domain.IDynamicOriginator.SetMemento(System.Object)">
            <summary>
            Set a memento
            </summary>
            <param name="memento">Dynamic representation of the memento to set</param>
        </member>
        <member name="T:Bifrost.Validation.NullChapterValidator">
            <summary>
            Represent a null or non-existant validator.
            </summary>
            <remarks>
            Always returns an empty validation result collection.
            </remarks>
        </member>
        <member name="T:Bifrost.Validation.IChapterValidator">
            <summary>
            Defines a validator for a Saga <see href="IChapter">Chapter</see>
            </summary>
        </member>
        <member name="M:Bifrost.Validation.IChapterValidator.ValidateChapter(Bifrost.Sagas.IChapter)">
            <summary>
            Validates that a chapter has all the requirements to allow transition.
            </summary>
            <param name="chapter">The chapter to validate</param>
            <returns>A collection of ValidationResults.  An empty collection indicates a valid chapter.</returns>
        </member>
        <member name="T:Bifrost.Validation.IChapterValidationService">
            <summary>
            Validates that the chapter is valid and conforms to specified business rules
            </summary>
        </member>
        <member name="M:Bifrost.Validation.IChapterValidationService.Validate(Bifrost.Sagas.IChapter)">
            <summary>
            Validate the chapter
            </summary>
            <param name="chapter">Instance to be validated</param>
            <returns>A collection of ValidationResults that indicate any invalid properties / rules</returns>
        </member>
        <member name="T:Bifrost.Validation.DefaultValidatorFactory">
            <summary>
            Represents the default <see cref="T:FluentValidation.IValidatorFactory"/> implementation used for validators
            </summary>
        </member>
        <member name="M:Bifrost.Validation.DefaultValidatorFactory.#ctor(Bifrost.Execution.ITypeDiscoverer,Bifrost.Execution.IContainer)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Validation.DefaultValidatorFactory"/>
            </summary>
            <param name="typeDiscoverer">A <see cref="T:Bifrost.Execution.ITypeDiscoverer"/> used for discovering validators</param>
            <param name="container">A <see cref="T:Bifrost.Execution.IContainer"/> to use for creating instances of the different validators</param>
        </member>
        <member name="T:Bifrost.Sagas.SagaNarrator">
            <summary>
            Represents a <see cref="T:Bifrost.Sagas.ISagaNarrator"/>
            </summary>
        </member>
        <member name="T:Bifrost.Sagas.ISagaNarrator">
            <summary>
            Defines the recorder for <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.ISagaNarrator.Begin``1">
            <summary>
            Begin a <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
            <typeparam name="T">Type of saga to begin</typeparam>
            <returns>An instance of the new saga</returns>
        </member>
        <member name="M:Bifrost.Sagas.ISagaNarrator.Continue(System.Guid)">
            <summary>
            Continue a <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
            <param name="id">Identifier of the saga</param>
            <returns>An instance of the <see cref="T:Bifrost.Sagas.ISaga"/></returns>
        </member>
        <member name="M:Bifrost.Sagas.ISagaNarrator.Conclude(Bifrost.Sagas.ISaga)">
            <summary>
            Conclude a <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
            <param name="saga"></param>
            <returns></returns>
            <remarks>
            Conclusion means that the saga is in fact not available any more
            </remarks>
        </member>
        <member name="M:Bifrost.Sagas.ISagaNarrator.TransitionTo``1(Bifrost.Sagas.ISaga)">
            <summary>
            Transition to a <see cref="T:Bifrost.Sagas.IChapter"/> by type
            </summary>
            <typeparam name="T">Type of <see cref="T:Bifrost.Sagas.IChapter"/> to transition to</typeparam>
            <param name="saga"><see cref="T:Bifrost.Sagas.ISaga"/> to transition</param>
            <returns><see cref="T:Bifrost.Sagas.ChapterTransition"/> Result of the transition attempt.  If successful, this will contain instance of the target <see cref="T:Bifrost.Sagas.IChapter"/> that was transitioned to.  Else, the validation errors.</returns>
            <remarks>
            If the chapter does not exist it will create it
            </remarks>
        </member>
        <member name="M:Bifrost.Sagas.SagaNarrator.#ctor(Bifrost.Sagas.ISagaLibrarian,Microsoft.Practices.ServiceLocation.IServiceLocator,Bifrost.Validation.IChapterValidationService,Bifrost.Events.IEventStore)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Sagas.SagaNarrator"/>
            </summary>
            <param name="librarian"><see cref="T:Bifrost.Sagas.ISagaLibrarian"/> to use for handling sagas</param>
            <param name="serviceLocator"><see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> for creating instances</param>
            <param name="chapterValidationService"><see cref="T:Bifrost.Validation.IChapterValidationService"/> for validating chapters</param>
            <param name="eventStore"></param>
        </member>
        <member name="T:Bifrost.Configuration.EventsConfiguration">
            <summary>
            Represents an implementation of <see cref="T:Bifrost.Configuration.IEventsConfiguration"/>
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.IEventsConfiguration">
            <summary>
            Defines the configuration for events
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.IEventsConfiguration.AddEventStoreChangeNotifier(System.Type)">
            <summary>
            Add a <see cref="T:Bifrost.Events.IEventStoreChangeNotifier"/> type for the configuration
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Bifrost.Configuration.IEventsConfiguration.Initialize(Bifrost.Configuration.IConfigure)">
            <summary>
            Initialize the configuration
            </summary>
            <param name="configure"><see cref="T:Bifrost.Configuration.IConfigure"/> instance to configure</param>
        </member>
        <member name="P:Bifrost.Configuration.IEventsConfiguration.RepositoryType">
            <summary>
            Gets or sets the type of repository for events
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.EventsConfiguration.#ctor(Bifrost.Events.IEventStoreChangeManager)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Configuration.EventsConfiguration"/>
            </summary>
            <param name="eventStoreChangeManager">An instance of <see cref="T:Bifrost.Events.IEventStoreChangeManager"/></param>
        </member>
        <member name="T:Bifrost.Sagas.State">
            <summary>
            Represents a state used in a <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
        </member>
        <member name="F:Bifrost.Sagas.State._canTransitionTo">
            <summary>
            Holds all states it can transition to
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.State.#ctor(System.Collections.Generic.ICollection{Bifrost.Sagas.State})">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Sagas.State"/>
            </summary>
            <param name="canTransitionTo">Collection of states it can transition to</param>
        </member>
        <member name="M:Bifrost.Sagas.State.CanTransitionTo(Bifrost.Sagas.State)">
            <summary>
            Check if this state can transition to a specified state
            </summary>
            <param name="state"><see cref="T:Bifrost.Sagas.State"/> to check if can transition to</param>
            <returns>true if it can transition, false if not</returns>
        </member>
        <member name="T:Bifrost.Execution.WriteOnceExpandoObject">
            <summary>
            Represents an ExpandoObject that can only have values assigned to during creation.
            Similar to <see cref="T:System.Dynamic.ExpandoObject"/>, members are dynamic and can be added on the fly
            </summary>
        </member>
        <member name="M:Bifrost.Execution.WriteOnceExpandoObject.#ctor(System.Action{System.Object})">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Execution.WriteOnceExpandoObject"/>
            </summary>
            <param name="populate">Action that gets called during creation for populate the object</param>
        </member>
        <member name="T:Bifrost.Execution.ExecutionContextManager">
            <summary>
            Represents a <see cref="T:Bifrost.Execution.IExecutionContextManager"/>
            </summary>
        </member>
        <member name="T:Bifrost.Events.EventSubscription">
            <summary>
            Represents a subscription for a specific <see cref="T:Bifrost.Events.IEventSubscriber"/> and method on it that can receive a method
            </summary>
        </member>
        <member name="M:Bifrost.Events.EventSubscription.SetEventSourceVersion(System.String,Bifrost.Events.EventSourceVersion)">
            <summary>
            Set the current version for an <see cref="T:Bifrost.Events.IEventSource"/> if the version is higher than 
            what is already on the subscription. If the <see cref="T:Bifrost.Events.IEventSource"/> is not there,
            it will automatically add it
            </summary>
            <param name="eventSource"><see cref="T:Bifrost.Events.IEventSource"/> by name to set version for</param>
            <param name="version"><see cref="T:Bifrost.Events.EventSourceVersion"/> to set</param>
        </member>
        <member name="M:Bifrost.Events.EventSubscription.MergeVersionsFrom(Bifrost.Events.EventSubscription)">
            <summary>
            Merge versions from another <see cref="T:Bifrost.Events.EventSubscription"/>
            </summary>
            <param name="subscription"><see cref="T:Bifrost.Events.EventSubscription"/> to merge from</param>
        </member>
        <member name="P:Bifrost.Events.EventSubscription.Owner">
            <summary>
            Gets or sets the owner of the subscriber method that subscribes to the event
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventSubscription.Method">
            <summary>
            Gets or sets the method that is subscribing to the event
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventSubscription.EventType">
            <summary>
            Gets or sets the actual event type that the subscriber handles
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventSubscription.EventName">
            <summary>
            Gets or sets the actual event name that the subscriber handles
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventSubscription.Versions">
            <summary>
            Gets or sets all the versions for the different <see cref="T:Bifrost.Events.IEventSource"/>s it has handled
            </summary>
        </member>
        <member name="T:Bifrost.Events.CommittedEventStream">
            <summary>
            Represents a special version of an <see cref="T:Bifrost.Events.EventStream">EventStream</see>
            that holds committed <see cref="T:Bifrost.Events.IEvent">events</see>
            </summary>
        </member>
        <member name="M:Bifrost.Events.CommittedEventStream.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Events.CommittedEventStream">CommittedEventStream</see>
            </summary>
            <param name="eventSourceId">Id of the event source - typically an <see cref="T:Bifrost.Domain.AggregatedRoot">AggregatedRoot</see></param>
        </member>
        <member name="M:Bifrost.Events.CommittedEventStream.Append(System.Collections.Generic.IEnumerable{Bifrost.Events.IEvent})">
            <summary>
            Append a set of events to the stream.  Events will be applied in Sequence, not in the order they are passed in.
            </summary>
            <param name="events"><see cref="T:System.Collections.Generic.IEnumerable`1">IEnumerable</see> of <see cref="T:Bifrost.Events.IEvent">events</see> to append</param>
        </member>
        <member name="T:Bifrost.Commands.ICommandHandlerForType`1">
            <summary>
            Defines a command handler for a specific type
            This is typically used for generic handling of commands
            </summary>
            <typeparam name="T">Type of object it can handle for</typeparam>
            <remarks>
            It works in correspondance with commands inheriting from 
            <see cref="T:Bifrost.Commands.ICommandForType`1">ICommandForType</see>.
            
            Also worth noting, you don't need to explicitly register these
            kinda handlers. The system will automatically find any type 
            implementing this type and automatically invoke it if a command
            comes into the system that corresponds to the type it supports.
            </remarks>
        </member>
        <member name="M:Bifrost.Commands.ICommandHandlerForType`1.Handle(Bifrost.Commands.ICommandForType{`0})">
            <summary>
            Handle a command
            </summary>
            <param name="commandForType">
            <see cref="T:Bifrost.Commands.ICommandForType`1">ICommandForType</see> to handle
            </param>
        </member>
        <member name="T:Bifrost.Events.DuplicateInEventMigrationHierarchyException">
            <summary>
            Represents an exceptional situation where an event in an <see cref="T:Bifrost.Events.EventMigrationHierarchy">EventMigrationHierarchy</see>
            has more than one migration path.
            </summary>
        </member>
        <member name="M:Bifrost.Events.DuplicateInEventMigrationHierarchyException.#ctor">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Events.DuplicateInEventMigrationHierarchyException"/>
            </summary>
        </member>
        <member name="M:Bifrost.Events.DuplicateInEventMigrationHierarchyException.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Events.DuplicateInEventMigrationHierarchyException"/>
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
        </member>
        <member name="M:Bifrost.Events.DuplicateInEventMigrationHierarchyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Events.DuplicateInEventMigrationHierarchyException"/>
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="innerException">The inner exception that is causing the exception</param>
        </member>
        <member name="M:Bifrost.Events.DuplicateInEventMigrationHierarchyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Events.DuplicateInEventMigrationHierarchyException"/> for serialization
            </summary>
            <param name="serializationInfo">Serialization Info</param>
            <param name="streamingContext">Streaming Context</param>
        </member>
        <member name="T:Bifrost.Configuration.Configure">
            <summary>
            Represents the default <see cref="T:Bifrost.Configuration.IConfigure"/> type
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.IConfigure">
            <summary>
            Defines the configuration for Bifrost
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.IConfigure.ConfigurationSource(Bifrost.Configuration.IConfigurationSource)">
            <summary>
            Sets a specific configuration source
            </summary>
            <param name="configurationSource"><see cref="T:Bifrost.Configuration.IConfigurationSource"/> to set</param>
        </member>
        <member name="M:Bifrost.Configuration.IConfigure.Initialize">
            <summary>
            Initializes Bifrost after configuration
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IConfigure.LoggerType">
            <summary>
            Gets the type of logger to use
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IConfigure.Container">
            <summary>
            Gets the container that is used
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IConfigure.Commands">
            <summary>
            Gets the configuration for commands
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IConfigure.Events">
            <summary>
            Gets the configuration for events
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IConfigure.Views">
            <summary>
            Gets the configuration for views
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IConfigure.ConventionManager">
            <summary>
            Gets the convention manager for bindings
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IConfigure.ApplicationManager">
            <summary>
            Gets the manager that manages applications
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IConfigure.Application">
            <summary>
            Gets the current <see cref="T:Bifrost.Execution.IApplication"/>
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IConfigure.Sagas">
            <summary>
            Gets the configuration for sagas
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IConfigure.Culture">
            <summary>
            Gets or sets the <see cref="T:System.Globalization.CultureInfo">culture</see> to use in Bifrost
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IConfigure.UICulture">
            <summary>
            Gets or sets the <see cref="T:System.Globalization.CultureInfo">UI culture</see> to use in Bifrost
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IConfigure.DefaultObjectLifecycle">
            <summary>
            Gets or sets the default <see cref="!:BindingLifeCycle"/> for objects when created/managed by the <see cref="T:Bifrost.Execution.IContainer"/>
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.Configure.With(Bifrost.Execution.IContainer)">
            <summary>
            Configure with a specific <see cref="T:Bifrost.Execution.IContainer"/> and the <see cref="T:Bifrost.Execution.BindingLifecycle">Lifecycle</see> of objects set to none
            </summary>
            <param name="container"><see cref="T:Bifrost.Execution.IContainer"/> to configure with</param>
            <returns>Configuration object to continue configuration on</returns>
        </member>
        <member name="M:Bifrost.Configuration.Configure.With(Bifrost.Execution.IContainer,Bifrost.Execution.BindingLifecycle)">
            <summary>
            Configure with a specific <see cref="T:Bifrost.Execution.IContainer"/>
            </summary>
            <param name="container"><see cref="T:Bifrost.Execution.IContainer"/> to configure with</param>
            <param name="defaultObjectLifecycle">Default <see cref="T:Bifrost.Execution.BindingLifecycle"/> for object creation/management</param>
            <returns>Configuration object to continue configuration on</returns>
        </member>
        <member name="M:Bifrost.Configuration.Configure.Reset">
            <summary>
            Reset configuration
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.Configure.With(Bifrost.Execution.IContainer,Bifrost.Configuration.Defaults.IDefaultConventions,Bifrost.Configuration.Defaults.IDefaultBindings)">
            <summary>
            Configure with a specific <see cref="T:Bifrost.Execution.IContainer"/>, <see cref="T:Bifrost.Configuration.Defaults.IDefaultConventions"/> and <see cref="T:Bifrost.Configuration.Defaults.IDefaultBindings"/>
            </summary>
            <param name="container"><see cref="T:Bifrost.Execution.IContainer"/> to configure with</param>
            <param name="defaultConventions"><see cref="T:Bifrost.Configuration.Defaults.IDefaultConventions"/> to use</param>
            <param name="defaultBindings"><see cref="T:Bifrost.Configuration.Defaults.IDefaultBindings"/> to use</param>
            <returns></returns>
        </member>
        <member name="M:Bifrost.Configuration.Configure.With(Bifrost.Execution.IContainer,Bifrost.Execution.BindingLifecycle,Bifrost.Configuration.Defaults.IDefaultConventions,Bifrost.Configuration.Defaults.IDefaultBindings)">
            <summary>
            Configure with a specific <see cref="T:Bifrost.Execution.IContainer"/>, <see cref="T:Bifrost.Configuration.Defaults.IDefaultConventions"/> and <see cref="T:Bifrost.Configuration.Defaults.IDefaultBindings"/>
            </summary>
            <param name="container"><see cref="T:Bifrost.Execution.IContainer"/> to configure with</param>
            <param name="defaultObjectLifecycle">Default <see cref="T:Bifrost.Execution.BindingLifecycle"/> for object creation/management</param>
            <param name="defaultConventions"><see cref="T:Bifrost.Configuration.Defaults.IDefaultConventions"/> to use</param>
            <param name="defaultBindings"><see cref="T:Bifrost.Configuration.Defaults.IDefaultBindings"/> to use</param>
            <returns></returns>
        </member>
        <member name="P:Bifrost.Configuration.Configure.Instance">
            <summary>
            Gets the static instance of <see cref="T:Bifrost.Configuration.Configure"/>
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.BifrostConfigHandler">
            <summary>
            Represents a <see cref="T:System.Configuration.IConfigurationSectionHandler"/> for App.config/Web.config configuration sections
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.BifrostConfigHandler.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Configuration.BifrostConfigHandler"/>
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.BifrostConfigHandler.#ctor(Bifrost.Configuration.Xml.ConfigParser)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Configuration.BifrostConfigHandler"/>
            </summary>
            <param name="parser"><see cref="T:Bifrost.Configuration.Xml.ConfigParser"/> to use for parsing</param>
        </member>
        <member name="T:Bifrost.Sagas.SagaState">
            <summary>
            Represents the state of a saga
            </summary>
        </member>
        <member name="F:Bifrost.Sagas.SagaState.CONCLUDED">
            <summary>
            The <see cref="T:Bifrost.Sagas.SagaState.Concluded"/> state of a <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
        </member>
        <member name="F:Bifrost.Sagas.SagaState.CONTINUING">
            <summary>
            The <see cref="T:Bifrost.Sagas.SagaState.Continuing"/> state of a <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
        </member>
        <member name="F:Bifrost.Sagas.SagaState.BEGUN">
            <summary>
            The <see cref="T:Bifrost.Sagas.SagaState.Begun"/> state of a <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
        </member>
        <member name="F:Bifrost.Sagas.SagaState.NEW">
            <summary>
            The <see cref="T:Bifrost.Sagas.SagaState.New"/> state of a <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.SagaState.#ctor(Bifrost.Sagas.State)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Sagas.SagaState"/> with a current state
            </summary>
            <param name="currentState"><see cref="T:Bifrost.Sagas.State">Current state</see> to set</param>
        </member>
        <member name="M:Bifrost.Sagas.SagaState.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Sagas.SagaState"/> with the current state set to <see cref="T:Bifrost.Sagas.SagaState.New"/>
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.SagaState.CanTransitionTo(Bifrost.Sagas.State)">
            <summary>
            Check if a transition is allowed
            </summary>
            <param name="newState"><see cref="T:Bifrost.Sagas.State"/> to check if is allowed</param>
            <returns>true if transition is allowed, false if not</returns>
        </member>
        <member name="M:Bifrost.Sagas.SagaState.TransitionTo(Bifrost.Sagas.State)">
            <summary>
            Transition to a given state
            </summary>
            <param name="newState"><see cref="T:Bifrost.Sagas.State"/> to transition to</param>
            <exception cref="T:Bifrost.Sagas.Exceptions.InvalidSagaStateTransitionException">Thrown if transition is not allowed</exception>
        </member>
        <member name="M:Bifrost.Sagas.SagaState.op_Implicit(System.String)~Bifrost.Sagas.SagaState">
            <summary>
            Implicit operator for converting a <see cref="T:System.String"/> to a <see cref="T:Bifrost.Sagas.SagaState"/>
            </summary>
            <param name="state"><see cref="T:System.String"/> containing state - see remarks</param>
            <returns><see cref="T:Bifrost.Sagas.SagaState"/> for the state string</returns>
            <remarks>
            Supported strings : 
            new
            begun
            continuing
            concluded
            
            Any other strings will cause a <see cref="T:Bifrost.Sagas.Exceptions.UnknownSagaStateException"/>
            </remarks>
        </member>
        <member name="M:Bifrost.Sagas.SagaState.ToString">
            <summary>
            Outputs the current state as string
            </summary>
            <returns>A string representing the current state</returns>
        </member>
        <member name="P:Bifrost.Sagas.SagaState.IsNew">
            <summary>
            Get wether or not the current state is <see cref="T:Bifrost.Sagas.SagaState.New"/>
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.SagaState.IsContinuing">
            <summary>
            Get wether or not the current state is <see cref="T:Bifrost.Sagas.SagaState.Continuing"/>
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.SagaState.IsBegun">
            <summary>
            Get wether or not the current state is <see cref="T:Bifrost.Sagas.SagaState.Begun"/>
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.SagaState.IsConcluded">
            <summary>
            Get wether or not the current state is <see cref="T:Bifrost.Sagas.SagaState.Concluded"/>
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.Xml.SagasElement">
            <summary>
            Represents a <see cref="T:Bifrost.Configuration.Xml.IConfigElement"/> for Sagas
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.Xml.SagasElement.LibrarianType">
            <summary>
            Gets or sets the type of librarian to use for sagas
            </summary>
        </member>
        <member name="T:Bifrost.ExceptionStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Bifrost.ExceptionStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Bifrost.ExceptionStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Bifrost.ExceptionStrings.CannotFastForwardEventSourceThatIsNotInitialVersion">
            <summary>
              Looks up a localized string similar to You cannot fast forward an event source that is not the initial version..
            </summary>
        </member>
        <member name="P:Bifrost.ExceptionStrings.CannotFastForwardStatefulEventSource">
            <summary>
              Looks up a localized string similar to You cannot fast forward a stateful event source.  You need to replay events to restore state..
            </summary>
        </member>
        <member name="P:Bifrost.ExceptionStrings.CommandNotEstablished">
            <summary>
              Looks up a localized string similar to Command has not been established.
            </summary>
        </member>
        <member name="T:Bifrost.Events.UncommittedEventStream">
            <summary>
            Represents a stream of events that are uncommitted
            </summary>
        </member>
        <member name="M:Bifrost.Events.UncommittedEventStream.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Events.UncommittedEventStream">UncommittedEventStream</see>
            </summary>
            <param name="eventSourceId">Id of the event source - typically an <see cref="T:Bifrost.Domain.AggregatedRoot">AggregatedRoot</see></param>
        </member>
        <member name="M:Bifrost.Events.UncommittedEventStream.Append(Bifrost.Events.IEvent)">
            <summary>
            Appends an event to the uncommitted event stream, setting the correct EventSourceId and Sequence Number for the event.
            </summary>
            <param name="event">The event to be appended.</param>
        </member>
        <member name="T:Bifrost.Entities.IEntityContextConnection">
            <summary>
            Marker interface for connection configuration for <see cref="T:Bifrost.Entities.IEntityContext`1">entity contexts</see>
            </summary>
        </member>
        <member name="T:Bifrost.Views.ObjectDoesNotHaveIdException">
            <summary>
            The exception that is thrown when an object does not have Id and a system requires it
            </summary>
        </member>
        <member name="T:Bifrost.Validation.CommandValidationService">
            <summary>
            Represents a <see cref="T:Bifrost.Validation.ICommandValidationService">ICommandValidationService</see>
            </summary>
        </member>
        <member name="M:Bifrost.Validation.CommandValidationService.#ctor(Bifrost.Validation.ICommandValidatorProvider)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Validation.CommandValidationService"/> CommandValidationService
            </summary>
            <param name="commandValidatorProvider"></param>
        </member>
        <member name="T:Bifrost.Configuration.Xml.EventsElement">
            <summary>
            Represents a <see cref="T:Bifrost.Configuration.Xml.IConfigElement"/> for configuring <see cref="T:Bifrost.Events.IEvent">events</see> from Xml
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.Xml.EventsElement.Storage">
            <summary>
            Gets or sets the storage configuration to use
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.Xml.EventsElement.RepositoryType">
            <summary>
            Gets or sets the <see cref="T:Bifrost.Events.IEventRepository"/> type to use
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.Xml.ElementNameAttribute">
            <summary>
            Represents an attribute to be used on configuration element classes to let
            the element be represented with a different name within the Xml than the classname
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.Xml.ElementNameAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Configuration.Xml.ElementNameAttribute"/>
            </summary>
            <param name="name">Name to represent the class as</param>
        </member>
        <member name="P:Bifrost.Configuration.Xml.ElementNameAttribute.Name">
            <summary>
            Get the name that the class should be represented as
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.Xml.ConfigParser">
            <summary>
            Defines a parser for Configuration information defined in Xml
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.Xml.ConfigParser.#ctor(Bifrost.Execution.ITypeDiscoverer)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Configuration.Xml.ConfigParser"/>
            </summary>
            <param name="typeDiscoverer">An instance of <see cref="T:Bifrost.Execution.ITypeDiscoverer"/></param>
        </member>
        <member name="M:Bifrost.Configuration.Xml.ConfigParser.Parse``1(System.Xml.Linq.XDocument)">
            <summary>
            Parses the Xml and returns a strongly typed configuraiton object
            </summary>
            <typeparam name="T">Generic type indicating the concrete type of Config that is returned</typeparam>
            <param name="document">XDocument containing configuration information</param>
            <returns>An instance of the concrete configuration type</returns>
        </member>
        <member name="T:Bifrost.Serialization.SerializerContractResolver">
            <summary>
            Represents a <see cref="T:Newtonsoft.Json.Serialization.IContractResolver"/> based on the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> for resolving contracts for serialization
            </summary>
        </member>
        <member name="M:Bifrost.Serialization.SerializerContractResolver.#ctor(Bifrost.Execution.IContainer,Bifrost.Serialization.SerializationOptions)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Serialization.SerializerContractResolver"/>
            </summary>
            <param name="container">A <see cref="T:Bifrost.Execution.IContainer"/> to use for creating instances of types</param>
            <param name="options"><see cref="T:Bifrost.Serialization.SerializationOptions"/> to use during resolving</param>
        </member>
        <member name="T:Bifrost.Sagas.Exceptions.UnknownSagaStateException">
            <summary>
            Represents an exceptional situation where an <see cref="T:Bifrost.Sagas.ISaga">Saga</see> is in an unknown <see cref="T:Bifrost.Sagas.SagaState">State</see>
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.Exceptions.UnknownSagaStateException.#ctor">
            <summary>
            Initializes an <see cref="T:Bifrost.Sagas.Exceptions.UnknownSagaStateException">UnknownSagaStateException</see>
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.Exceptions.UnknownSagaStateException.#ctor(System.String)">
            <summary>
            Initializes an <see cref="T:Bifrost.Sagas.Exceptions.UnknownSagaStateException">UnknownSagaStateException</see>
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:Bifrost.Sagas.Exceptions.UnknownSagaStateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an <see cref="T:Bifrost.Sagas.Exceptions.UnknownSagaStateException">UnknownSagaStateException</see>
            </summary>
            <param name="message">Error message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="M:Bifrost.Sagas.Exceptions.UnknownSagaStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an <see cref="T:Bifrost.Sagas.Exceptions.UnknownSagaStateException">UnknownSagaStateException</see> for serialization
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Streaming Context</param>
        </member>
        <member name="T:Bifrost.Events.EventSubscriptionRepository">
            <summary>
            Represents an implementation of <see cref="T:Bifrost.Events.IEventSubscriptionRepository"/>
            </summary>
        </member>
        <member name="T:Bifrost.Events.IEventSubscriptionRepository">
            <summary>
            Defines a repository for working with <see cref="T:Bifrost.Events.EventSubscription">EventSubscriptions</see>
            </summary>
        </member>
        <member name="M:Bifrost.Events.IEventSubscriptionRepository.GetForEvent(System.Type)">
            <summary>
            Get all subscriptions for a specific <see cref="T:Bifrost.Events.IEvent"/> type
            </summary>
            <param name="eventType">Type of <see cref="T:Bifrost.Events.IEvent"/> to get for</param>
            <returns>All <see cref="T:Bifrost.Events.EventSubscription">EventSubscriptions</see> for the given type</returns>
        </member>
        <member name="M:Bifrost.Events.IEventSubscriptionRepository.GetAll">
            <summary>
            Get all subscriptions available
            </summary>
            <returns>All available <see cref="T:Bifrost.Events.EventSubscription">EventSubscriptions</see> </returns>
        </member>
        <member name="M:Bifrost.Events.IEventSubscriptionRepository.Add(Bifrost.Events.EventSubscription)">
            <summary>
            Add a <see cref="T:Bifrost.Events.EventSubscription"/>
            </summary>
            <param name="subscription"><see cref="T:Bifrost.Events.EventSubscription"/> to add</param>
        </member>
        <member name="M:Bifrost.Events.IEventSubscriptionRepository.Update(Bifrost.Events.EventSubscription)">
            <summary>
            Update an existing <see cref="T:Bifrost.Events.EventSubscription"/>
            </summary>
            <param name="subscription"><see cref="T:Bifrost.Events.EventSubscription"/> to update</param>
        </member>
        <member name="M:Bifrost.Events.EventSubscriptionRepository.#ctor(Bifrost.Entities.IEntityContext{Bifrost.Events.EventSubscriptionHolder},Bifrost.Serialization.ISerializer)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Events.EventSubscriptionRepository"/>
            </summary>
            <param name="entityContext">An <see cref="T:Bifrost.Entities.IEntityContext`1"/> for working with persisting of <see cref="T:Bifrost.Events.EventSubscriptionHolder">EventSubscriptionHolders</see></param>
            <param name="serializer">A <see cref="T:Bifrost.Serialization.ISerializer"/> to use for serialization</param>
        </member>
        <member name="T:Bifrost.Configuration.SagasConfiguration">
            <summary>
            Represents a <see cref="T:Bifrost.Configuration.ISagasConfiguration"/> implementation
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.ISagasConfiguration">
            <summary>
            Defines the configuration for sagas
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.ISagasConfiguration.Initialize(Bifrost.Configuration.Configure)">
            <summary>
            Initialize the saga configuration
            </summary>
            <param name="configure"><see cref="T:Bifrost.Configuration.Configure"/> instance to initialize for</param>
        </member>
        <member name="P:Bifrost.Configuration.ISagasConfiguration.LibrarianType">
            <summary>
            Gets or sets the type of librarian to use for sagas
            </summary>
        </member>
        <member name="T:Bifrost.Time.SystemClock">
            <summary>
            Represents a clock that keeps track of the current system date and time.
            Current system date and time can be substituted for explicit DateTime for testing purposes.
            </summary>
        </member>
        <member name="F:Bifrost.Time.SystemClock.MinimumTime">
            <summary>
            Gets the minimum time supported by the <see cref="T:Bifrost.Time.SystemClock"/>
            </summary>
        </member>
        <member name="M:Bifrost.Time.SystemClock.GetCurrentTime">
            <summary>
            Retrieves the current system date and time
            </summary>
            <returns>The current system date and time</returns>
        </member>
        <member name="M:Bifrost.Time.SystemClock.SetNowTo(System.DateTime)">
            <summary>
            Allows the current date and time to be set to an explicit value.  SOLELY FOR TESTING PURPOSES.
            Use within a "using" block within your test so that the current time is reset on exiting the test.
            </summary>
            <param name="dateTime">The explicit datetime that you wish to set within the test</param>
            <returns>A new instance of the SystemClock class which will return the explicitly set current time when queried.</returns>
        </member>
        <member name="M:Bifrost.Time.SystemClock.Dispose">
            <summary>
            Will remove any explicitly set current time,
            </summary>
        </member>
        <member name="T:Bifrost.Commands.ICommandHandler">
            <summary>
            Marker interface for command handlers
            </summary>
            <remarks>
            A command handler must then implement a Handle method that takes the
            specific <see cref="T:Bifrost.Commands.ICommand">command</see> you want to be handled.
            
            The system will automatically detect your command handlers and methods
            and call it automatically when a <see cref="T:Bifrost.Commands.ICommand">command</see>
            comes into the system
            </remarks>
        </member>
        <member name="T:Bifrost.Events.MethodEventFactory">
            <summary>
            Provides functionality for creating method events
            </summary>
        </member>
        <member name="M:Bifrost.Events.MethodEventFactory.CreateMethodEventFromExpression(System.Guid,System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Create a <see cref="T:Bifrost.Events.MethodEvent">MethodEvent</see> from a method <see cref="T:System.Linq.Expressions.Expression`1">expression</see>
            </summary>
            <param name="eventSourceId">Id of the event source</param>
            <param name="method">Expression holding the method to create from</param>
            <returns>A <see cref="T:Bifrost.Events.MethodEvent">MethodEvent</see></returns>
        </member>
        <member name="T:Bifrost.Events.MethodEventArguments">
            <summary>
            Represents arguments for a <see cref="T:Bifrost.Events.MethodEvent">MethodEvent</see>
            </summary>
        </member>
        <member name="M:Bifrost.Events.MethodEventArguments.GetArgumentValues">
            <summary>
            Get all values for all arguments
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bifrost.Events.MethodEventArguments.Item(System.String)">
            <summary>
            Gets or sets the value associated with a given argument for a method
            </summary>
            <param name="argument">Name of argument</param>
            <returns>Value for the argument</returns>
        </member>
        <member name="T:Bifrost.Entities.IEntityContext`1">
            <summary>
            Defines a context for working with entities typically stored in a datastore
            </summary>
            <typeparam name="T">Type of entity the context works on</typeparam>
        </member>
        <member name="M:Bifrost.Entities.IEntityContext`1.Attach(`0)">
            <summary>
            Attach an entity to the context
            </summary>
            <param name="entity">Entity to attach</param>
            <remarks>
            In some conditions you might have an untracked entity, in order for that
            entity to be state handled by some implementations; you need to attach it.
            </remarks>
        </member>
        <member name="M:Bifrost.Entities.IEntityContext`1.Insert(`0)">
            <summary>
            Insert a newly created entity
            </summary>
            <param name="entity">Entity to insert</param>
        </member>
        <member name="M:Bifrost.Entities.IEntityContext`1.Update(`0)">
            <summary>
            Update an existing entity
            </summary>
            <param name="entity">Entity to update</param>
        </member>
        <member name="M:Bifrost.Entities.IEntityContext`1.Delete(`0)">
            <summary>
            Delete an existing entity
            </summary>
            <param name="entity">Entity to delete</param>
        </member>
        <member name="M:Bifrost.Entities.IEntityContext`1.Save(`0)">
            <summary>
            Save en existing entity
            </summary>
            <param name="entity">Entity to save</param>
        </member>
        <member name="M:Bifrost.Entities.IEntityContext`1.Commit">
            <summary>
            Commit any changes in the context
            </summary>
        </member>
        <member name="P:Bifrost.Entities.IEntityContext`1.Entities">
            <summary>
            Gets a queryable that one can do queries against
            </summary>
        </member>
        <member name="T:Bifrost.Domain.InvalidAggregateException">
            <summary>
            The exception that is thrown when there is something invalid with
            an <see cref="T:Bifrost.Domain.AggregatedRoot">AggregatedRoot</see>
            </summary>
        </member>
        <member name="M:Bifrost.Domain.InvalidAggregateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Bifrost.Domain.InvalidAggregateException">InvalidAggregateException</see> class
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
        </member>
        <member name="T:Bifrost.Events.EventStore">
            <summary>
            Represents an <see cref="T:Bifrost.Events.IEventStore"/>
            </summary>
        </member>
        <member name="M:Bifrost.Events.EventStore.#ctor(Bifrost.Events.IEventRepository,Bifrost.Events.IEventStoreChangeManager,Bifrost.Events.IEventSubscriptionManager,Bifrost.Globalization.ILocalizer)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Events.EventStore"/>
            </summary>
            <param name="repository"><see cref="T:Bifrost.Events.IEventRepository"/> that persists events</param>
            <param name="eventStoreChangeManager">A <see cref="T:Bifrost.Events.IEventStoreChangeManager"/> for managing changes to the event store</param>
            <param name="eventSubscriptionManager">A <see cref="T:Bifrost.Events.IEventSubscriptionManager"/> for managing event subscriptions</param>
            <param name="localizer"><see cref="T:Bifrost.Globalization.ILocalizer"/> that ensures thread has the correct culture.</param>
        </member>
        <member name="T:Bifrost.Domain.AggregatedRootFactory`1">
            <summary>
            Represents a <see cref="T:Bifrost.Domain.IAggregatedRootFactory`1">IAggregatedRootFactory</see>
            </summary>
            <typeparam name="T">Type of aggregated root the factory is for</typeparam>
        </member>
        <member name="M:Bifrost.Domain.AggregatedRootFactory`1.#ctor(Bifrost.Commands.ICommandContextManager)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Domain.AggregatedRootFactory`1">AggregatedRootFactory</see>
            </summary>
            <param name="commandContextManager">
            A <see cref="T:Bifrost.Commands.ICommandContextManager">ICommandContextManager</see> for registering objects for tracking
            during creation
            </param>
        </member>
        <member name="T:Bifrost.Validation.CommandInputValidator`1">
            <summary>
            Base class to inherit from for basic input validation of a command.
            </summary>
            <remarks>
            Commands inherting from this base class will be automatically registered.
            </remarks>
            <typeparam name="T">Concrete type of the Command to validate</typeparam>
        </member>
        <member name="T:Bifrost.Configuration.ConfigSection.ConfigurationManager">
            <summary>
            Represents <see cref="T:Bifrost.Configuration.ConfigSection.IConfigurationManager"/> that works on the <see cref="T:System.Configuration.ConfigurationManager"/>
            </summary>
        </member>
        <member name="T:Bifrost.Execution.MultipleApplicationsFoundException">
            <summary>
            The exception that is thrown if multiple <see cref="T:Bifrost.Execution.IApplication"/> types exist in the current AppDomain
            </summary>
        </member>
        <member name="T:Bifrost.Execution.TypeDiscoverer">
            <summary>
            Represents a <see cref="T:Bifrost.Execution.ITypeDiscoverer">ITypeDiscoverer</see>
            
            Uses the current AppDomain / Deployment and discoveres all types loaded
            </summary>
        </member>
        <member name="M:Bifrost.Execution.TypeDiscoverer.ExcludeNamespaceStartingWith(System.String)">
            <summary>
            Exclude discovering of types in a specific namespace
            </summary>
            <param name="name">Namespace to exclude</param>
        </member>
        <member name="M:Bifrost.Execution.TypeDiscoverer.#ctor(Bifrost.Execution.IAssemblyLocator)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Execution.TypeDiscoverer">TypeDiscoverer</see>
            </summary>
        </member>
        <member name="T:Bifrost.Commands.CommandHandlerForTypeInvoker">
            <summary>
            Represents a <see cref="T:Bifrost.Commands.ICommandHandlerInvoker">ICommandHandlerInvoker</see>
            </summary>
        </member>
        <member name="M:Bifrost.Commands.CommandHandlerForTypeInvoker.#ctor(Bifrost.Execution.IContainer,Bifrost.Execution.ITypeDiscoverer)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Commands.CommandHandlerForTypeInvoker">CommandHandlerForTypeInvoker</see>
            </summary>
            <param name="container"><see cref="T:Bifrost.Execution.IContainer"/> to use for creating instances of CommandHandlers discovered</param>
            <param name="typeDiscoverer">A <see cref="T:Bifrost.Execution.ITypeDiscoverer">ITypeDiscoverer</see> used for discovering <see cref="T:Bifrost.Commands.ICommandHandlerForType`1">ICommandHandlerForType</see> implementations</param>
        </member>
        <member name="T:Bifrost.Configuration.Xml.BifrostConfig">
            <summary>
            Represents the entire configuration of Bifrost from Xml
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.Xml.BifrostConfig.DefaultStorage">
            <summary>
            Gets or sets the default storage configuration, typically applied if not explicitly configured elsewhere
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.Xml.BifrostConfig.Commands">
            <summary>
            Gets or sets the <see cref="T:Bifrost.Configuration.Xml.CommandsElement"/> for configuring commands behavior in Bifrost
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.Xml.BifrostConfig.Events">
            <summary>
            Gets or sets the <see cref="T:Bifrost.Configuration.Xml.EventsElement"/> for configuring events behavior in Bifrost
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.Xml.BifrostConfig.Sagas">
            <summary>
            Gets or sets the <see cref="T:Bifrost.Configuration.Xml.SagasElement"/> for configuring sagas behavior in Bifrost
            </summary>
        </member>
        <member name="T:Bifrost.Validation.ChapterValidationService">
            <summary>
            Represents a <see cref="T:Bifrost.Validation.IChapterValidationService">IChapterValidationService</see>
            </summary>
        </member>
        <member name="M:Bifrost.Validation.ChapterValidationService.#ctor(Bifrost.Validation.IChapterValidatorProvider)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Validation.ChapterValidationService"/>
            </summary>
            <param name="chapterValidatorProvider">A <see cref="T:Bifrost.Validation.IChapterValidatorProvider"/> to use for getting validators from</param>
        </member>
        <member name="T:Bifrost.Sagas.SagaCommandContext">
            <summary>
            Represents a <see cref="T:Bifrost.Commands.ICommandContext"/> as a <see cref="T:Bifrost.Lifecycle.IUnitOfWork"/> for a <see cref="T:Bifrost.Commands.ICommand"/> applied to a <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.SagaCommandContext.#ctor(Bifrost.Sagas.ISaga,Bifrost.Commands.ICommand,Bifrost.Execution.IExecutionContext,Bifrost.Events.IEventStore,Bifrost.Events.IProcessMethodInvoker,Bifrost.Sagas.ISagaLibrarian)">
            <summary>
            Initializes an instance of the <see cref="T:Bifrost.Sagas.SagaCommandContext"/> for a saga
            </summary>
            <param name="saga"><see cref="T:Bifrost.Sagas.ISaga"/> to start the context for</param>
            <param name="command"><see cref="T:Bifrost.Commands.ICommand"/> that will be applied </param>
            <param name="executionContext">A <see cref="T:Bifrost.Execution.IExecutionContext"/> that is the context of execution for the <see cref="T:Bifrost.Commands.ICommand"/></param>
            <param name="eventStore">A <see cref="T:Bifrost.Events.IEventStore"/> that will receive any events generated</param>
            <param name="processMethodInvoker">A <see cref="T:Bifrost.Events.IProcessMethodInvoker"/> for processing events on the <see cref="T:Bifrost.Sagas.ISaga"/></param>
            <param name="sagaLibrarian">A <see cref="T:Bifrost.Sagas.ISagaLibrarian"/> for dealing with the <see cref="T:Bifrost.Sagas.ISaga"/> and persistence</param>
        </member>
        <member name="T:Bifrost.Events.EventHolder">
            <summary>
            Represents a holder for an <see cref="T:Bifrost.Events.IEvent"/> to be used for purposes such as persisting or
            transferring across boundaries
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventHolder.Id">
            <summary>
            Gets or sets the id of the event
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventHolder.CommandName">
            <summary>
            Gets or sets the name of the command that indirectly caused the event
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventHolder.Name">
            <summary>
            Gets or sets the name of the event
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventHolder.AggregateId">
            <summary>
            Gets or sets the aggregated roots Id that the event applies to
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventHolder.AggregatedRoot">
            <summary>
            Gets or sets the aggregated root name the event applies to.
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventHolder.LogicalEventName">
            <summary>
            Gets or sets the logical name of the event
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventHolder.EventSourceName">
            <summary>
            Gets or sets the name of the EventSource
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventHolder.Version">
            <summary>
            Gets or sets the version for the event
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventHolder.SerializedEvent">
             <summary>
             Gets or sets the serialized event.
            
             This is a Json representation of the actual event
             </summary>
        </member>
        <member name="P:Bifrost.Events.EventHolder.CausedBy">
             <summary>
             Gets or sets who or what the event was caused by.
            
             Typically this would be the name of the user or system causing it
             </summary>
        </member>
        <member name="P:Bifrost.Events.EventHolder.Origin">
             <summary>
             Gets or sets the origin of the event.
            
             Typically this would be what part of the system the event indirectly is coming from
             </summary>
        </member>
        <member name="P:Bifrost.Events.EventHolder.Occured">
            <summary>
            Gets or sets the time the event occured
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventHolder.Generation">
            <summary>
            Gets or sets the generation of the event in the event migration hierarchy
            </summary>
        </member>
        <member name="T:Bifrost.Domain.AggregatedRootOf`1">
            <summary>
            Represents a base class used for AggregatedRoots that will share events with another
            AggregatedRoot
            </summary>
            <typeparam name="T">Type of aggregated root that serves as the event source</typeparam>
        </member>
        <member name="M:Bifrost.Domain.AggregatedRootOf`1.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of an <see cref="T:Bifrost.Domain.AggregatedRootOf`1"/>
            </summary>
            <param name="id">Id of the AggregatedRoot</param>
        </member>
        <member name="T:Bifrost.Execution.ApplicationNotFoundException">
            <summary>
            The exception that is thrown when there is no type implementing <see cref="T:Bifrost.Execution.IApplication"/> in the AppDomain
            </summary>
        </member>
        <member name="T:Bifrost.Extensions.TypeExtensions">
            <summary>
            Provides a set of methods for working with <see cref="T:System.Type">types</see>
            </summary>
        </member>
        <member name="M:Bifrost.Extensions.TypeExtensions.HasDefaultConstructor(System.Type)">
            <summary>
            Check if a type has a default constructor that does not take any arguments
            </summary>
            <param name="type">Type to check</param>
            <returns>true if it has a default constructor, false if not</returns>
        </member>
        <member name="M:Bifrost.Extensions.TypeExtensions.HasInterface``1(System.Type)">
            <summary>
            Check if a type implements a specific interface
            </summary>
            <typeparam name="T">Interface to check for</typeparam>
            <param name="type">Type to check</param>
            <returns>True if the type implements the interface, false if not</returns>
        </member>
        <member name="M:Bifrost.Extensions.TypeExtensions.HasInterface(System.Type,System.Type)">
            <summary>
            Check if a type implements a specific interface
            </summary>
            <param name="type">Type to check</param>
            <param name="interfaceType">Interface to check for</param>
            <returns>True if the type implements the interface, false if not</returns>
        </member>
        <member name="T:Bifrost.Events.ICanPublishEvents">
            <summary>
            Defines the capability of publishing events
            </summary>
        </member>
        <member name="M:Bifrost.Events.ICanPublishEvents.Publish(Bifrost.Events.IEvent)">
            <summary>
            Publish a single event
            </summary>
            <param name="event">Event to publish</param>
        </member>
        <member name="M:Bifrost.Events.ICanPublishEvents.Publish(System.Collections.Generic.IEnumerable{Bifrost.Events.IEvent})">
            <summary>
            Publish a set of events
            </summary>
            <param name="events">Events to publish</param>
        </member>
        <member name="T:Bifrost.Events.EventOutOfSequenceException">
            <summary>
            The exception that is thrown when an <see cref="T:Bifrost.Events.IEvent"/> is out of sequence in an <see cref="T:Bifrost.Events.EventStream"/>
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.Xml.CommandsElement">
            <summary>
            Represents configuration for Commands
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.Xml.CommandsElement.Storage">
            <summary>
            Gets or sets the <see cref="T:Bifrost.Configuration.Xml.StorageElement"/> for configuring storage of commands
            </summary>
        </member>
        <member name="T:Bifrost.Serialization.Serializer">
            <summary>
            Represents a <see cref="T:Bifrost.Serialization.ISerializer"/>
            </summary>
        </member>
        <member name="M:Bifrost.Serialization.Serializer.#ctor(Bifrost.Execution.IContainer)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Serialization.Serializer"/>
            </summary>
            <param name="container">A <see cref="T:Bifrost.Execution.IContainer"/> used to create instances of types during serialization</param>
        </member>
        <member name="T:Bifrost.Events.IEventConverter">
            <summary>
            Defines a converter for converting an <see cref="T:Bifrost.Events.IEvent"/> to <see cref="T:Bifrost.Events.EventHolder"/> and vice versa
            </summary>
        </member>
        <member name="M:Bifrost.Events.IEventConverter.ToEvent(Bifrost.Events.EventHolder)">
            <summary>
            Convert an <see cref="T:Bifrost.Events.EventHolder"/> to an <see cref="T:Bifrost.Events.IEvent"/> of correct type from the <see cref="T:Bifrost.Events.EventHolder"/>
            </summary>
            <param name="eventHolder"><see cref="T:Bifrost.Events.EventHolder"/> to convert</param>
            <returns>A new instance of an <see cref="T:Bifrost.Events.IEvent"/> with correct type based upon the <see cref="T:Bifrost.Events.EventHolder"/></returns>
        </member>
        <member name="M:Bifrost.Events.IEventConverter.ToEventHolder(Bifrost.Events.IEvent)">
            <summary>
            Converts an <see cref="T:Bifrost.Events.IEvent"/> to an <see cref="T:Bifrost.Events.EventHolder"/>
            </summary>
            <param name="event"><see cref="T:Bifrost.Events.IEvent"/> to convert</param>
            <returns>A new instance of an <see cref="T:Bifrost.Events.EventHolder"/> holding all details about the <see cref="T:Bifrost.Events.IEvent"/></returns>
        </member>
        <member name="M:Bifrost.Events.IEventConverter.ToEventHolder(Bifrost.Events.EventHolder,Bifrost.Events.IEvent)">
            <summary>
            Convert an <see cref="T:Bifrost.Events.IEvent"/> into an existing <see cref="T:Bifrost.Events.EventHolder"/>
            </summary>
            <param name="eventHolder"><see cref="T:Bifrost.Events.EventHolder"/> to convert into</param>
            <param name="event"><see cref="T:Bifrost.Events.IEvent"/> to convert from</param>
        </member>
        <member name="M:Bifrost.Events.IEventConverter.ToEventHolders(System.Collections.Generic.IEnumerable{Bifrost.Events.IEvent})">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> into an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="events">Events to convert</param>
            <returns>Converted <see cref="T:Bifrost.Events.EventHolder"/>s</returns>
        </member>
        <member name="M:Bifrost.Events.IEventConverter.ToEvents(System.Collections.Generic.IEnumerable{Bifrost.Events.EventHolder})">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> into an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="eventHolders"><see cref="T:Bifrost.Events.EventHolder"/>s to convert</param>
            <returns>Converted events</returns>
        </member>
        <member name="T:Bifrost.Commands.DynamicCommandHandler">
            <summary>
            Represents a <see cref="T:Bifrost.Commands.ICommandHandler"/> that works on <see cref="T:Bifrost.Commands.DynamicCommand"/>
            </summary>
        </member>
        <member name="T:Bifrost.Commands.Command">
            <summary>
            Represents a <see cref="T:Bifrost.Commands.ICommand"/>
            </summary>
        </member>
        <member name="M:Bifrost.Commands.Command.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Commands.Command"/>
            </summary>
        </member>
        <member name="T:Bifrost.Commands.ICommandHandlerManager">
            <summary>
            Defines the functionality for a manager that handles commands
            
            Handles a <see cref="T:Bifrost.Commands.ICommand">command</see> by calling any
            command handlers that can handle the specific command
            </summary>
        </member>
        <member name="M:Bifrost.Commands.ICommandHandlerManager.Handle(Bifrost.Commands.ICommand)">
            <summary>
            Handle a command
            </summary>
            <param name="command"><see cref="T:Bifrost.Commands.ICommand">Command</see> to handle</param>
        </member>
        <member name="T:Bifrost.Commands.ICommandContextManager">
            <summary>
            Manages command contexts
            </summary>
        </member>
        <member name="M:Bifrost.Commands.ICommandContextManager.GetCurrent">
            <summary>
            Gets the current <see cref="T:Bifrost.Commands.ICommandContext">command context</see>, if any
            </summary>
            <returns>
            The current <see cref="T:Bifrost.Commands.ICommandContext">command context</see>.
            If there is no current context, it will throw an InvalidOperationException
            </returns>
        </member>
        <member name="M:Bifrost.Commands.ICommandContextManager.EstablishForCommand(Bifrost.Commands.ICommand)">
            <summary>
            Establish a <see cref="T:Bifrost.Commands.ICommandContext">command context</see> for a specific <see cref="T:Bifrost.Commands.ICommand">command</see>.
            This will be the current command context, unless something else establishes a new context
            </summary>
            <param name="command"><see cref="T:Bifrost.Commands.ICommand">Command</see> to establish for</param>
            <returns>Established context</returns>
            <remarks>
            The contexts are not stacked. So establishing two contexts after one another does not give you a chance to
            go back up the "stack".
            </remarks>
        </member>
        <member name="M:Bifrost.Commands.ICommandContextManager.EstablishForSaga(Bifrost.Sagas.ISaga,Bifrost.Commands.ICommand)">
            <summary>
            Establish a <see cref="T:Bifrost.Commands.ICommandContext">command context</see> for a specific <see cref="T:Bifrost.Commands.ICommand">command</see> in the
            context of a Saga.
            This will be the current command context, unless something else establishes a new context
            </summary>
            <param name="saga"><see cref="T:Bifrost.Sagas.ISaga"/> to be in context of</param>
            <param name="command"><see cref="T:Bifrost.Commands.ICommand">Command</see> to establish for</param>
            <returns>Established context</returns>
            <remarks>
            The contexts are not stacked. So establishing two contexts after one another does not give you a chance to
            go back up the "stack".
            </remarks>
        </member>
        <member name="P:Bifrost.Commands.ICommandContextManager.HasCurrent">
            <summary>
            Gets whether or not we have a current command context
            </summary>
        </member>
        <member name="T:Bifrost.Commands.CommandHandlerManager">
            <summary>
            Represents a <see cref="T:Bifrost.Commands.ICommandHandlerManager">ICommandHandlerManager</see>
            </summary>
            <remarks>
            The manager will automatically import any <see cref="T:Bifrost.Commands.ICommandHandlerInvoker">ICommandHandlerInvoker</see>
            and use them when handling
            </remarks>
        </member>
        <member name="M:Bifrost.Commands.CommandHandlerManager.#ctor(Bifrost.Execution.ITypeImporter)">
            <summary>
            Initializes a new instance of a <see cref="T:Bifrost.Commands.CommandHandlerManager">CommandHandlerManager</see>
            </summary>
            <param name="importer">
            <see cref="T:Bifrost.Execution.ITypeImporter">TypeImporter</see> to use for discovering the 
            <see cref="T:Bifrost.Commands.ICommandHandlerInvoker">ICommandHandlerInvoker</see>'s to use
            </param>
        </member>
        <member name="T:Bifrost.Commands.CommandContextManager">
            <summary>
            Represents a <see cref="T:Bifrost.Commands.ICommandContextManager">Command context manager</see>
            </summary>
        </member>
        <member name="M:Bifrost.Commands.CommandContextManager.ResetContext">
            <summary>
            Reset context
            </summary>
        </member>
        <member name="M:Bifrost.Commands.CommandContextManager.#ctor(Bifrost.Events.IEventStore,Bifrost.Sagas.ISagaLibrarian,Bifrost.Events.IProcessMethodInvoker,Bifrost.Execution.IExecutionContextManager)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Commands.CommandContextManager">CommandContextManager</see>
            </summary>
            <param name="eventStore">A <see cref="T:Bifrost.Events.IEventStore">IEventStore</see> to use for saving events</param>
            <param name="sagaLibrarian">A <see cref="T:Bifrost.Sagas.ISagaLibrarian"/> for saving sagas to</param>
            <param name="processMethodInvoker">A <see cref="T:Bifrost.Events.IProcessMethodInvoker"/> for processing events</param>
            <param name="executionContextManager">A <see cref="T:Bifrost.Execution.IExecutionContextManager"/> for getting execution context from</param>
        </member>
        <member name="T:Bifrost.Domain.AggregatedRootCommandHandler`1">
            <summary>
            Generic CommandHandler for commands targetting AggregatedRoots
            </summary>
            <typeparam name="T">
            Type of <see cref="T:Bifrost.Domain.AggregatedRoot">AggregatedRoot</see> it handles
            </typeparam>
            <remarks>
            Purpose of this command handler is to do some of the repetitive tedious things one
            must do for handling commands for aggregated roots.
            
            Typically all repository behavior and factory behavior
            </remarks>
        </member>
        <member name="M:Bifrost.Domain.AggregatedRootCommandHandler`1.#ctor">
            <summary>
            Constructs a <see cref="T:Bifrost.Domain.AggregatedRootCommandHandler`1">AggregatedRootCommandHandler</see>
            </summary>
        </member>
        <member name="M:Bifrost.Domain.AggregatedRootCommandHandler`1.Handle(Bifrost.Commands.ICommandForType{`0})">
            <summary>
            Handle the command
            </summary>
            <param name="commandForType">Command to handle</param>
        </member>
        <member name="T:Bifrost.Events.EventMigrationHierarchyDiscoverer">
            <summary>
            Represents a <see cref="T:Bifrost.Events.IEventMigrationHierarchyDiscoverer">IEventMigrationHierarchyDiscoverer</see>
            </summary>
            <remarks>
            The discoverer will automatically build an <see cref="T:Bifrost.Events.EventMigrationHierarchy">EventMigrationHierarchy</see> for all events.
            </remarks>
        </member>
        <member name="T:Bifrost.Events.IEventMigrationHierarchyDiscoverer">
            <summary>
            Defines a discoverer that is able to detect all events and group them into <see cref="T:Bifrost.Events.EventMigrationHierarchy">EventMigrationHierarchies</see>
            </summary>
        </member>
        <member name="M:Bifrost.Events.IEventMigrationHierarchyDiscoverer.GetMigrationHierarchies">
            <summary>
            Gets all the <see cref="T:Bifrost.Events.EventMigrationHierarchy">EventMigrationHierarchies</see> for events
            </summary>
            <returns>Event Migration Hierarchies</returns>
        </member>
        <member name="M:Bifrost.Events.EventMigrationHierarchyDiscoverer.#ctor(Bifrost.Execution.ITypeDiscoverer)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Events.EventMigrationHierarchyDiscoverer"/>
            </summary>
            <param name="typeDiscoverer"></param>
        </member>
        <member name="T:Bifrost.Validation.NullCommandBusinessValidator">
            <summary>
            Represent a null or non-existant validator.
            </summary>
            <remarks>
            Always returns an empty validation result collection.
            </remarks>
        </member>
        <member name="T:Bifrost.Configuration.Defaults.IDefaultConventions">
            <summary>
            Defines the default conventions setup
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.Defaults.IDefaultConventions.Initialize">
            <summary>
            Initialize the default conventions
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.Defaults.DefaultConventions">
            <summary>
            Represents a <see cref="T:Bifrost.Configuration.Defaults.IDefaultConventions"/> implementation
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.CommandsConfiguration">
            <summary>
            Represents an implementation of <see cref="T:Bifrost.Configuration.ICommandsConfiguration"/>
            </summary>
        </member>
        <member name="T:Bifrost.Sagas.Constants">
            <summary>
            Constants that are used within Bifrost.Sagas
            </summary>
        </member>
        <member name="F:Bifrost.Sagas.Constants.NEW">
            <summary>
            Represents the <see cref="T:Bifrost.Sagas.SagaState"/> of "new"
            </summary>
        </member>
        <member name="F:Bifrost.Sagas.Constants.BEGUN">
            <summary>
            Represents the <see cref="T:Bifrost.Sagas.SagaState"/> of "begun"
            </summary>
        </member>
        <member name="F:Bifrost.Sagas.Constants.CONTINUING">
            <summary>
            Represents the <see cref="T:Bifrost.Sagas.SagaState"/> of "continuing"
            </summary>
        </member>
        <member name="F:Bifrost.Sagas.Constants.CONCLUDED">
            <summary>
            Represents the <see cref="T:Bifrost.Sagas.SagaState"/> of "concluded"
            </summary>
        </member>
        <member name="T:Bifrost.Time.Month">
            <summary>
            Month in a Gregorian calendar based year
            </summary>
        </member>
        <member name="T:Bifrost.Events.IEventSubscriber">
            <summary>
            Defines an event subscriber
            </summary>
        </member>
        <member name="T:Bifrost.Resources.IHaveResources">
            <summary>
            Defines the behavior of having resources represented as properties in your class
            </summary>
        </member>
        <member name="T:Bifrost.Views.IHaveId">
            <summary>
            Defines the behavior of having an Id - typically used by objects during querying
            </summary>
        </member>
        <member name="P:Bifrost.Views.IHaveId.Id">
            <summary>
            Get the Id of the object
            </summary>
        </member>
        <member name="T:Bifrost.Events.IEventRepository">
            <summary>
            Defines a repository for working with <see cref="T:Bifrost.Events.IEvent">Events</see>
            </summary>
        </member>
        <member name="M:Bifrost.Events.IEventRepository.GetById(System.Guid)">
            <summary>
            Get a specific event by its Id
            </summary>
            <param name="id">Id of the event</param>
            <returns>An instance of the event</returns>
        </member>
        <member name="M:Bifrost.Events.IEventRepository.GetByIdAsJson(System.Guid)">
            <summary>
            Get a specific event as Json
            </summary>
            <param name="id">Id of the event</param>
            <returns>A string containing Json</returns>
        </member>
        <member name="M:Bifrost.Events.IEventRepository.GetByIds(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Get a set of events based upon a set of Ids
            </summary>
            <param name="ids">Ids of events to get</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Bifrost.Events.IEvent"/> containing the events</returns>
        </member>
        <member name="M:Bifrost.Events.IEventRepository.GetForAggregatedRoot(System.Type,System.Guid)">
            <summary>
            Get a set of events for a specific aggregated root
            </summary>
            <param name="aggregatedRootType">Type of the aggregated root</param>
            <param name="aggregateId">Id of the aggregated root</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Bifrost.Events.IEvent"/> for the aggregated root</returns>
        </member>
        <member name="M:Bifrost.Events.IEventRepository.GetUnprocessedEventsForSubscriptions(System.Collections.Generic.IEnumerable{Bifrost.Events.EventSubscription})">
            <summary>
            Get events based on a set of subscriptions - any events of the given type in the subscriptions with
            that are unprocessed according to the subscription 
            </summary>
            <param name="subscriptions">Subscriptions to get for</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Bifrost.Events.IEvent"/> for the subscriptions, if any</returns>
        </member>
        <member name="M:Bifrost.Events.IEventRepository.Insert(System.Collections.Generic.IEnumerable{Bifrost.Events.IEvent})">
            <summary>
            Insert a set of events
            </summary>
            <param name="events"><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Bifrost.Events.IEvent"/> to insert</param>
        </member>
        <member name="M:Bifrost.Events.IEventRepository.GetLastCommittedVersion(System.Type,System.Guid)">
            <summary>
            Gets the last committed <seealso cref="T:Bifrost.Events.EventSourceVersion">Event Source Version</seealso> for this aggregate root
            </summary>
            <param name="aggregatedRootType">Type of the aggregate root</param>
            <param name="aggregateId">Id of the aggregate root</param>
            <returns>The <seealso cref="T:Bifrost.Events.EventSourceVersion">Event Source Version</seealso> of the last committed event for this aggregate root</returns>
        </member>
        <member name="T:Bifrost.Events.EventSubscriber`1">
            <summary>
            Represents a base class implementation of an <see cref="T:Bifrost.Events.IEventSubscriber"/>
            </summary>
            <typeparam name="T">Type of view object the subscriber is working on</typeparam>
        </member>
        <member name="M:Bifrost.Events.EventSubscriber`1.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Events.EventSubscriber`1"/>
            </summary>
        </member>
        <member name="M:Bifrost.Events.EventSubscriber`1.InsertEntity(`0)">
            <summary>
            Insert an entity into the datasource
            </summary>
            <param name="entity">Entity to insert</param>
        </member>
        <member name="M:Bifrost.Events.EventSubscriber`1.DeleteEntity(Bifrost.Events.IEvent)">
            <summary>
            Delete an entity based upon an incoming <see cref="T:Bifrost.Events.IEvent"/>
            </summary>
            <param name="event">Event to delete based upon</param>
        </member>
        <member name="M:Bifrost.Events.EventSubscriber`1.DeleteEntity(`0)">
            <summary>
            Delete a specific entity
            </summary>
            <param name="entity">Entity to delete</param>
        </member>
        <member name="M:Bifrost.Events.EventSubscriber`1.Exists(`0)">
            <summary>
            Check if an entity already exists
            </summary>
            <param name="entity">Entity to check if exists</param>
            <returns>True if exists, false if not</returns>
        </member>
        <member name="M:Bifrost.Events.EventSubscriber`1.SaveEntity(`0)">
            <summary>
            Saves an entity - if it doesn't already exist, it inserts else it updates it
            </summary>
            <param name="entity">Entity to save</param>
        </member>
        <member name="M:Bifrost.Events.EventSubscriber`1.GetEntity(System.Guid)">
            <summary>
            Get an entity based upon its ID (<see cref="T:System.Guid"/>)
            </summary>
            <param name="id">Id of the entity to get</param>
            <returns>An instance of the entity</returns>
        </member>
        <member name="M:Bifrost.Events.EventSubscriber`1.UpdateProperty(Bifrost.Events.IEvent,System.Action{`0})">
            <summary>
            Update a property on an entity and commit the change
            </summary>
            <param name="event"><see cref="T:Bifrost.Events.IEvent"/> event that will be used to get the entity</param>
            <param name="propertyAction">Action to call that will do the changes it needs</param>
            <remarks>
            This method gets the entity, calls the action provided that will modify one or more properties
            and then updates the entity and commits it to the datasource
            </remarks>
        </member>
        <member name="P:Bifrost.Events.EventSubscriber`1.Repository">
            <summary>
            Gets the <see cref="T:Bifrost.Views.IView`1"/> for the type for querying
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventSubscriber`1.EntityContext">
            <summary>
            Gets the full <see cref="T:Bifrost.Entities.IEntityContext`1"/> for CRUD operations for the type
            </summary>
        </member>
        <member name="T:Bifrost.Sagas.SagaConclusion">
            <summary>
            Represents the conclusion of a saga
            </summary>
        </member>
        <member name="T:Bifrost.Sagas.Saga">
            <summary>
            Represents a <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.Saga.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Sagas.Saga"/>
            </summary>
        </member>
        <member name="T:Bifrost.Sagas.ChapterHolder">
            <summary>
            Represents a holder for a <see cref="T:Bifrost.Sagas.IChapter"/>, typically used for serializing a chapter
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.ChapterHolder.Type">
            <summary>
            Gets or sets the type of the chapter
            </summary>
            <remarks>
            Fully Assembly qualified name
            </remarks>
        </member>
        <member name="P:Bifrost.Sagas.ChapterHolder.SerializedChapter">
            <summary>
            Gets or sets the serialized version of the <see cref="T:Bifrost.Sagas.IChapter"/>
            </summary>
        </member>
        <member name="T:Bifrost.Events.InvalidFastForwardException">
            <summary>
            Represents an exceptional situation where an <see cref="T:Bifrost.Events.IEventSource">EventSource</see> is stateful 
            but there has been an attempt to retrieve it without restoring state by replaying events (fast-forwarding)
            </summary>
        </member>
        <member name="M:Bifrost.Events.InvalidFastForwardException.#ctor">
            <summary>
            Initializes an <see cref="T:Bifrost.Events.InvalidFastForwardException">InvalidFastForwardException</see>
            </summary>
        </member>
        <member name="M:Bifrost.Events.InvalidFastForwardException.#ctor(System.String)">
            <summary>
            Initializes an <see cref="T:Bifrost.Events.InvalidFastForwardException">InvalidFastForwardException</see>
            </summary>
            <param name="message">Error Message</param>
        </member>
        <member name="M:Bifrost.Events.InvalidFastForwardException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an <see cref="T:Bifrost.Events.InvalidFastForwardException">InvalidFastForwardException</see>
            </summary>
            <param name="message">Error Message</param>
            <param name="inner">Inner Exception</param>
        </member>
        <member name="M:Bifrost.Events.InvalidFastForwardException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an <see cref="T:Bifrost.Events.InvalidFastForwardException">InvalidFastForwardException</see> for serialization
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Streaming Context</param>
        </member>
        <member name="T:Bifrost.Events.EventRepository">
            <summary>
            Represents a <see cref="T:Bifrost.Events.IEventRepository"/>
            </summary>
        </member>
        <member name="M:Bifrost.Events.EventRepository.#ctor(Bifrost.Entities.IEntityContext{Bifrost.Events.EventHolder},Bifrost.Events.IEventConverter,Bifrost.Events.IEventMigrationHierarchyManager)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Events.EventRepository"/>
            </summary>
            <param name="entityContext"><see cref="T:Bifrost.Entities.IEntityContext`1"/> for retrieving events</param>
            <param name="eventConverter"><see cref="T:Bifrost.Events.IEventConverter"/> for converting events</param>
            <param name="eventMigrationHierarchyManager">A <see cref="T:Bifrost.Events.IEventMigrationHierarchyManager"/> for managing event migrations</param>
        </member>
        <member name="T:Bifrost.Commands.DynamicCommand">
            <summary>
            Represents a <see cref="T:Bifrost.Commands.DynamicCommand"/>
            </summary>
            <remarks>
            The purpose of this representation of a <see cref="T:Bifrost.Commands.ICommand"/> is to provide 
            a dynamic and generic command type that represents a method on an <see cref="T:Bifrost.Domain.AggregatedRoot"/>
            </remarks>
        </member>
        <member name="M:Bifrost.Commands.DynamicCommand.SetValue(System.String,System.Object)">
            <summary>
            Set a value in the command based upon the property name
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Bifrost.Commands.DynamicCommand.InvokeMethod(Bifrost.Domain.AggregatedRoot)">
            <summary>
            Invoke the method represented by the command on a given <see cref="T:Bifrost.Domain.AggregatedRoot"/>
            </summary>
            <param name="aggregatedRoot"><see cref="T:Bifrost.Domain.AggregatedRoot"/> to invoke the method on</param>
        </member>
        <member name="P:Bifrost.Commands.DynamicCommand.AggregatedRootType">
            <summary>
            Gets or sets the type of <see cref="T:Bifrost.Domain.AggregatedRoot"/> the command is targetting
            </summary>
        </member>
        <member name="P:Bifrost.Commands.DynamicCommand.Id">
            <summary>
            Gets or sets the Id of the command - which is also the Id of the <see cref="T:Bifrost.Domain.AggregatedRoot"/>
            </summary>
        </member>
        <member name="P:Bifrost.Commands.DynamicCommand.Method">
            <summary>
            Gets or sets the method that will be called
            </summary>
        </member>
        <member name="T:Bifrost.Validation.ConventionValidatorFactory">
            <summary>
            Represents a <see cref="T:FluentValidation.IValidatorFactory"/> that is based on conventions
            </summary>
        </member>
        <member name="M:Bifrost.Validation.ConventionValidatorFactory.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Validation.ConventionValidatorFactory"/>
            </summary>
            <param name="serviceLocator"><see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> to use for getting instances of <see cref="T:FluentValidation.IValidator">validators</see></param>
        </member>
        <member name="T:Bifrost.Domain.IMemento">
            <summary>
            Marker interface for mementos
            </summary>
        </member>
        <member name="T:Bifrost.Commands.UnhandledCommandException">
            <summary>
            The exception that is thrown when a command is not handled by any <see cref="T:Bifrost.Commands.ICommandHandler"/>
            </summary>
        </member>
        <member name="M:Bifrost.Commands.UnhandledCommandException.#ctor(Bifrost.Commands.ICommand)">
            <summary>
            Initializes a new instance <see cref="T:Bifrost.Commands.UnhandledCommandException"/>
            </summary>
            <param name="command"><see cref="T:Bifrost.Commands.ICommand"/> that wasn't handled</param>
        </member>
        <member name="P:Bifrost.Commands.UnhandledCommandException.Command">
            <summary>
            Gets the <see cref="T:Bifrost.Commands.ICommand"/> that wasn't handled
            </summary>
        </member>
        <member name="T:Bifrost.Commands.ICommandContextStore">
            <summary>
            Defines the store for getting and saving <see cref="T:Bifrost.Commands.CommandContext">CommandContext</see> from its persistent data store
            </summary>
        </member>
        <member name="M:Bifrost.Commands.ICommandContextStore.Get(System.Guid)">
            <summary>
            Get a specific <see cref="T:Bifrost.Commands.CommandContext">CommandContext</see> based on its Id
            </summary>
            <param name="id">The Id of the <see cref="T:Bifrost.Commands.CommandContext">CommandContext</see> to get</param>
            <returns>The actual <see cref="T:Bifrost.Commands.CommandContext">CommandContext</see></returns>
        </member>
        <member name="T:Bifrost.Validation.ChapterValidator`1">
            <summary>
            Base class to inherit from for validation of a Chapter.
            </summary>
            <remarks>
            Chapter validators inherting from this base class will be automatically registered.
            </remarks>
            <typeparam name="T">Concrete type of the Chapter to validate</typeparam>
        </member>
        <member name="T:Bifrost.Sagas.ChapterDoesNotExistException">
            <summary>
            The exception that is thrown if a <see cref="T:Bifrost.Sagas.IChapter"/> does not exist in a <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
        </member>
        <member name="T:Bifrost.Events.EventExtensions">
            <summary>
            Extensions for an enumerable of <see cref="T:Bifrost.Events.IEvent">Events</see> 
            </summary>
        </member>
        <member name="M:Bifrost.Events.EventExtensions.MarkEventsWithCommand(System.Collections.Generic.IEnumerable{Bifrost.Events.IEvent},Bifrost.Commands.ICommand)">
            <summary>
            Populates each <see cref="T:Bifrost.Events.IEvent">Event</see> with the name of the command that caused the event.
            </summary>
            <param name="events">Enumerable of <see cref="T:Bifrost.Events.IEvent">events</see> to be extended</param>
            <param name="command"><see cref="T:Bifrost.Commands.ICommand">Command</see> that caused the events to be generated</param>
        </member>
        <member name="M:Bifrost.Events.EventExtensions.ExpandExecutionContext(System.Collections.Generic.IEnumerable{Bifrost.Events.IEvent},Bifrost.Execution.IExecutionContext)">
            <summary>
            Populates each <see cref="T:Bifrost.Events.IEvent">Event</see> with elements from the <see cref="T:Bifrost.Execution.IExecutionContext">ExecutionContext</see>
            </summary>
            <param name="events">Enumerable of <see cref="T:Bifrost.Events.IEvent">events</see> to be extended</param>
            <param name="executionContext"><see cref="T:Bifrost.Execution.IExecutionContext">Execution Context</see> under which the <see cref="T:Bifrost.Events.IEvent">events</see> were generated</param>
        </member>
        <member name="T:Bifrost.Events.EventConverter">
            <summary>
            Represents an implementation of a <see cref="T:Bifrost.Events.IEventConverter"/>
            </summary>
        </member>
        <member name="M:Bifrost.Events.EventConverter.#ctor(Bifrost.Serialization.ISerializer,Bifrost.Events.IEventMigratorManager,Bifrost.Events.IEventMigrationHierarchyManager)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Events.EventConverter"/>
            </summary>
            <param name="serializer">A <see cref="T:Bifrost.Serialization.ISerializer"/> used during conversion for serialization</param>
            <param name="eventMigratorManager">A <see cref="T:Bifrost.Events.IEventMigratorManager"/> for getting migrators for an <see cref="T:Bifrost.Events.IEvent"/></param>
            <param name="eventMigrationHierarchyManager">A <see cref="T:Bifrost.Events.IEventMigrationHierarchyManager"/> for handling the migration hierarchies for an <see cref="T:Bifrost.Events.IEvent"/></param>
        </member>
    </members>
</doc>
